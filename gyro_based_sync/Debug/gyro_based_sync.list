
gyro_based_sync.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000723c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800749c  0800749c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800749c  0800749c  0001749c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074a4  080074a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080074ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000070  0800751c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  0800751c  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f91f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002056  00000000  00000000  0002f9bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001000  00000000  00000000  00031a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f18  00000000  00000000  00032a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021620  00000000  00000000  00033930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000baae  00000000  00000000  00054f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1a32  00000000  00000000  000609fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132430  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004750  00000000  00000000  001324ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073b4 	.word	0x080073b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080073b4 	.word	0x080073b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <read_TIM2>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t read_TIM2() {
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return TIM2->CNT;
 8000574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800057a:	4618      	mov	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <HAL_GPIO_EXTI_Callback>:
    __io_putchar(*ptr++);
  }
  return len;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
	if (flag_is_main_part == 1) {
 800058e:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <HAL_GPIO_EXTI_Callback+0x80>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d110      	bne.n	80005b8 <HAL_GPIO_EXTI_Callback+0x34>
		if (GPIO_Pin == GPIO_PIN_3) {
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	2b08      	cmp	r3, #8
 800059a:	d12e      	bne.n	80005fa <HAL_GPIO_EXTI_Callback+0x76>
			flag_to_read_values = 1;
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <HAL_GPIO_EXTI_Callback+0x84>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
			HAL_RTC_GetTime(&hrtc, &sTime1, RTC_FORMAT_BIN);
 80005a2:	2200      	movs	r2, #0
 80005a4:	4919      	ldr	r1, [pc, #100]	; (800060c <HAL_GPIO_EXTI_Callback+0x88>)
 80005a6:	481a      	ldr	r0, [pc, #104]	; (8000610 <HAL_GPIO_EXTI_Callback+0x8c>)
 80005a8:	f004 ffdb 	bl	8005562 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate1, RTC_FORMAT_BIN);
 80005ac:	2200      	movs	r2, #0
 80005ae:	4919      	ldr	r1, [pc, #100]	; (8000614 <HAL_GPIO_EXTI_Callback+0x90>)
 80005b0:	4817      	ldr	r0, [pc, #92]	; (8000610 <HAL_GPIO_EXTI_Callback+0x8c>)
 80005b2:	f005 f834 	bl	800561e <HAL_RTC_GetDate>
				flag_is_main_part = 1;
			}
		}
	}
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
}
 80005b6:	e020      	b.n	80005fa <HAL_GPIO_EXTI_Callback+0x76>
		if (GPIO_Pin == GPIO_PIN_2) {
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	d105      	bne.n	80005ca <HAL_GPIO_EXTI_Callback+0x46>
			t1 = read_TIM2();
 80005be:	f7ff ffd7 	bl	8000570 <read_TIM2>
 80005c2:	4602      	mov	r2, r0
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <HAL_GPIO_EXTI_Callback+0x94>)
 80005c6:	601a      	str	r2, [r3, #0]
}
 80005c8:	e017      	b.n	80005fa <HAL_GPIO_EXTI_Callback+0x76>
		else if (GPIO_Pin == GPIO_PIN_3) {
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	2b08      	cmp	r3, #8
 80005ce:	d114      	bne.n	80005fa <HAL_GPIO_EXTI_Callback+0x76>
			t2 = read_TIM2();
 80005d0:	f7ff ffce 	bl	8000570 <read_TIM2>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <HAL_GPIO_EXTI_Callback+0x98>)
 80005d8:	601a      	str	r2, [r3, #0]
			flag_t2_read = 1;
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <HAL_GPIO_EXTI_Callback+0x9c>)
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]
			dataset_count++;
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <HAL_GPIO_EXTI_Callback+0xa0>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_GPIO_EXTI_Callback+0xa0>)
 80005ea:	801a      	strh	r2, [r3, #0]
			if (dataset_count >= DATASET_LENGTH) {
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <HAL_GPIO_EXTI_Callback+0xa0>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	2b09      	cmp	r3, #9
 80005f2:	d902      	bls.n	80005fa <HAL_GPIO_EXTI_Callback+0x76>
				flag_is_main_part = 1;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <HAL_GPIO_EXTI_Callback+0x80>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000008f 	.word	0x2000008f
 8000608:	2000008e 	.word	0x2000008e
 800060c:	20000094 	.word	0x20000094
 8000610:	2000020c 	.word	0x2000020c
 8000614:	200000a8 	.word	0x200000a8
 8000618:	200000ac 	.word	0x200000ac
 800061c:	200000b0 	.word	0x200000b0
 8000620:	200000b6 	.word	0x200000b6
 8000624:	20000090 	.word	0x20000090

08000628 <setup_mpu>:

void setup_mpu(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af04      	add	r7, sp, #16
	uint8_t dat[] = {5, 16, 6, 1};
 800062e:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <setup_mpu+0xcc>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	60bb      	str	r3, [r7, #8]
	uint8_t adds[] = {107, 55, 26, 56};
 8000634:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <setup_mpu+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	607b      	str	r3, [r7, #4]
	uint8_t n_of_bytes = sizeof(dat) / sizeof(dat[0]);
 800063a:	2304      	movs	r3, #4
 800063c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t idx=0; idx<n_of_bytes; idx++) {
 800063e:	2300      	movs	r3, #0
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	e02e      	b.n	80006a2 <setup_mpu+0x7a>
		HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, adds[idx], 1, &dat[idx], 1, 100);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	f107 0210 	add.w	r2, r7, #16
 800064a:	4413      	add	r3, r2
 800064c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000650:	b299      	uxth	r1, r3
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	f107 0208 	add.w	r2, r7, #8
 8000658:	4413      	add	r3, r2
 800065a:	2264      	movs	r2, #100	; 0x64
 800065c:	9202      	str	r2, [sp, #8]
 800065e:	2201      	movs	r2, #1
 8000660:	9201      	str	r2, [sp, #4]
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2301      	movs	r3, #1
 8000666:	460a      	mov	r2, r1
 8000668:	21d0      	movs	r1, #208	; 0xd0
 800066a:	4824      	ldr	r0, [pc, #144]	; (80006fc <setup_mpu+0xd4>)
 800066c:	f001 ffea 	bl	8002644 <HAL_I2C_Mem_Write>
		//delay(1000);
		HAL_I2C_Mem_Write(&hi2c2, 0x68<<1, adds[idx], 1, &dat[idx], 1, 100);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	f107 0210 	add.w	r2, r7, #16
 8000676:	4413      	add	r3, r2
 8000678:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800067c:	b299      	uxth	r1, r3
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	f107 0208 	add.w	r2, r7, #8
 8000684:	4413      	add	r3, r2
 8000686:	2264      	movs	r2, #100	; 0x64
 8000688:	9202      	str	r2, [sp, #8]
 800068a:	2201      	movs	r2, #1
 800068c:	9201      	str	r2, [sp, #4]
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2301      	movs	r3, #1
 8000692:	460a      	mov	r2, r1
 8000694:	21d0      	movs	r1, #208	; 0xd0
 8000696:	481a      	ldr	r0, [pc, #104]	; (8000700 <setup_mpu+0xd8>)
 8000698:	f001 ffd4 	bl	8002644 <HAL_I2C_Mem_Write>
	for (uint8_t idx=0; idx<n_of_bytes; idx++) {
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	3301      	adds	r3, #1
 80006a0:	73fb      	strb	r3, [r7, #15]
 80006a2:	7bfa      	ldrb	r2, [r7, #15]
 80006a4:	7bbb      	ldrb	r3, [r7, #14]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d3cc      	bcc.n	8000644 <setup_mpu+0x1c>
		//HAL_I2C_Mem_Write(&hi2c1, 0x69<<1, adds[idx], 1, &dat[idx], 1, 100);
		//HAL_I2C_Mem_Write(&hi2c2, 0x69<<1, adds[idx], 1, &dat[idx], 1, 100);
	}
	dat[0] = 7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	723b      	strb	r3, [r7, #8]
	adds[0] = 104;
 80006ae:	2368      	movs	r3, #104	; 0x68
 80006b0:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, adds[0], 1, &dat[0], 1, 100);
 80006b2:	793b      	ldrb	r3, [r7, #4]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	9302      	str	r3, [sp, #8]
 80006ba:	2301      	movs	r3, #1
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	21d0      	movs	r1, #208	; 0xd0
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <setup_mpu+0xd4>)
 80006ca:	f001 ffbb 	bl	8002644 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, 0x68<<1, adds[0], 1, &dat[0], 1, 100);
 80006ce:	793b      	ldrb	r3, [r7, #4]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	2364      	movs	r3, #100	; 0x64
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2301      	movs	r3, #1
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2301      	movs	r3, #1
 80006e2:	21d0      	movs	r1, #208	; 0xd0
 80006e4:	4806      	ldr	r0, [pc, #24]	; (8000700 <setup_mpu+0xd8>)
 80006e6:	f001 ffad 	bl	8002644 <HAL_I2C_Mem_Write>
	//HAL_I2C_Mem_Write(&hi2c1, 0x69<<1, adds[0], 1, &dat[0], 1, 100);
	//HAL_I2C_Mem_Write(&hi2c2, 0x69<<1, adds[0], 1, &dat[0], 1, 100);
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	080073cc 	.word	0x080073cc
 80006f8:	080073d0 	.word	0x080073d0
 80006fc:	200000d4 	.word	0x200000d4
 8000700:	20000138 	.word	0x20000138

08000704 <i2c_transaction>:



void i2c_transaction(uint8_t sensor_num) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af02      	add	r7, sp, #8
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	switch (sensor_num) {
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	3b01      	subs	r3, #1
 8000712:	2b03      	cmp	r3, #3
 8000714:	d836      	bhi.n	8000784 <i2c_transaction+0x80>
 8000716:	a201      	add	r2, pc, #4	; (adr r2, 800071c <i2c_transaction+0x18>)
 8000718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071c:	0800072d 	.word	0x0800072d
 8000720:	08000743 	.word	0x08000743
 8000724:	08000759 	.word	0x08000759
 8000728:	0800076f 	.word	0x0800076f
		case 1 : HAL_I2C_Mem_Read_DMA(&hi2c1, 0x68<<1, 59, 1, dat1, 14); break;
 800072c:	230e      	movs	r3, #14
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <i2c_transaction+0x88>)
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2301      	movs	r3, #1
 8000736:	223b      	movs	r2, #59	; 0x3b
 8000738:	21d0      	movs	r1, #208	; 0xd0
 800073a:	4815      	ldr	r0, [pc, #84]	; (8000790 <i2c_transaction+0x8c>)
 800073c:	f002 f87c 	bl	8002838 <HAL_I2C_Mem_Read_DMA>
 8000740:	e020      	b.n	8000784 <i2c_transaction+0x80>
		case 2 : HAL_I2C_Mem_Read_DMA(&hi2c2, 0x68<<1, 59, 1, dat2, 14); break;
 8000742:	230e      	movs	r3, #14
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <i2c_transaction+0x90>)
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	223b      	movs	r2, #59	; 0x3b
 800074e:	21d0      	movs	r1, #208	; 0xd0
 8000750:	4811      	ldr	r0, [pc, #68]	; (8000798 <i2c_transaction+0x94>)
 8000752:	f002 f871 	bl	8002838 <HAL_I2C_Mem_Read_DMA>
 8000756:	e015      	b.n	8000784 <i2c_transaction+0x80>
		case 3 : HAL_I2C_Mem_Read_DMA(&hi2c1, 0x69<<1, 59, 1, dat3, 14); break;
 8000758:	230e      	movs	r3, #14
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <i2c_transaction+0x98>)
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2301      	movs	r3, #1
 8000762:	223b      	movs	r2, #59	; 0x3b
 8000764:	21d2      	movs	r1, #210	; 0xd2
 8000766:	480a      	ldr	r0, [pc, #40]	; (8000790 <i2c_transaction+0x8c>)
 8000768:	f002 f866 	bl	8002838 <HAL_I2C_Mem_Read_DMA>
 800076c:	e00a      	b.n	8000784 <i2c_transaction+0x80>
		case 4 : HAL_I2C_Mem_Read_DMA(&hi2c2, 0x69<<1, 59, 1, dat4, 14); break;
 800076e:	230e      	movs	r3, #14
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <i2c_transaction+0x9c>)
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2301      	movs	r3, #1
 8000778:	223b      	movs	r2, #59	; 0x3b
 800077a:	21d2      	movs	r1, #210	; 0xd2
 800077c:	4806      	ldr	r0, [pc, #24]	; (8000798 <i2c_transaction+0x94>)
 800077e:	f002 f85b 	bl	8002838 <HAL_I2C_Mem_Read_DMA>
 8000782:	bf00      	nop
		//HAL_I2C_Mem_Read_DMA(&hi2c1, 0x68<<1, 59, 1, dat1, 14);
		//HAL_I2C_Mem_Read(&hi2c2, 0x68<<1, 59, 1, dat2, 14, 10);
		//HAL_I2C_Mem_Read_DMA(&hi2c2, 0x68<<1, 59, 1, dat2, 14);

	}
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000031c 	.word	0x2000031c
 8000790:	200000d4 	.word	0x200000d4
 8000794:	2000032c 	.word	0x2000032c
 8000798:	20000138 	.word	0x20000138
 800079c:	20000128 	.word	0x20000128
 80007a0:	200000c4 	.word	0x200000c4

080007a4 <make_string>:

void make_string(void) {
 80007a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a6:	b09d      	sub	sp, #116	; 0x74
 80007a8:	af12      	add	r7, sp, #72	; 0x48
				"%04x %04x %04x %04x %04x %04x %04x " 			//35
				"%04x %04x %04x %04x %04x %04x %04x "			 	//35
				"%04x"                                      //4
				"\n", 																			//1
																										//=91
				(uint8_t)(sTime1.Minutes),
 80007aa:	4b67      	ldr	r3, [pc, #412]	; (8000948 <make_string+0x1a4>)
 80007ac:	785b      	ldrb	r3, [r3, #1]
	sprintf(str,
 80007ae:	469c      	mov	ip, r3
				(uint8_t)(sTime1.Seconds),
 80007b0:	4b65      	ldr	r3, [pc, #404]	; (8000948 <make_string+0x1a4>)
 80007b2:	789b      	ldrb	r3, [r3, #2]
	sprintf(str,
 80007b4:	469e      	mov	lr, r3
				(uint16_t)(sTime1.SubSeconds),
 80007b6:	4b64      	ldr	r3, [pc, #400]	; (8000948 <make_string+0x1a4>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	b29b      	uxth	r3, r3
	sprintf(str,
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
 80007be:	4b63      	ldr	r3, [pc, #396]	; (800094c <make_string+0x1a8>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	623b      	str	r3, [r7, #32]

				count,

				(uint16_t)(dat1_buf[0]<<8 | dat1_buf[1]),
 80007c4:	4b62      	ldr	r3, [pc, #392]	; (8000950 <make_string+0x1ac>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	4b60      	ldr	r3, [pc, #384]	; (8000950 <make_string+0x1ac>)
 80007ce:	785b      	ldrb	r3, [r3, #1]
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	b29b      	uxth	r3, r3
	sprintf(str,
 80007d8:	61fb      	str	r3, [r7, #28]
				(uint16_t)(dat1_buf[2]<<8 | dat1_buf[3]),
 80007da:	4b5d      	ldr	r3, [pc, #372]	; (8000950 <make_string+0x1ac>)
 80007dc:	789b      	ldrb	r3, [r3, #2]
 80007de:	021b      	lsls	r3, r3, #8
 80007e0:	b21a      	sxth	r2, r3
 80007e2:	4b5b      	ldr	r3, [pc, #364]	; (8000950 <make_string+0x1ac>)
 80007e4:	78db      	ldrb	r3, [r3, #3]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	b29b      	uxth	r3, r3
	sprintf(str,
 80007ee:	61bb      	str	r3, [r7, #24]
				(uint16_t)(dat1_buf[4]<<8 | dat1_buf[5]),
 80007f0:	4b57      	ldr	r3, [pc, #348]	; (8000950 <make_string+0x1ac>)
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	b21a      	sxth	r2, r3
 80007f8:	4b55      	ldr	r3, [pc, #340]	; (8000950 <make_string+0x1ac>)
 80007fa:	795b      	ldrb	r3, [r3, #5]
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	4313      	orrs	r3, r2
 8000800:	b21b      	sxth	r3, r3
 8000802:	b29b      	uxth	r3, r3
	sprintf(str,
 8000804:	617b      	str	r3, [r7, #20]
				(uint16_t)(dat1_buf[6]<<8 | dat1_buf[7]),
 8000806:	4b52      	ldr	r3, [pc, #328]	; (8000950 <make_string+0x1ac>)
 8000808:	799b      	ldrb	r3, [r3, #6]
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	b21a      	sxth	r2, r3
 800080e:	4b50      	ldr	r3, [pc, #320]	; (8000950 <make_string+0x1ac>)
 8000810:	79db      	ldrb	r3, [r3, #7]
 8000812:	b21b      	sxth	r3, r3
 8000814:	4313      	orrs	r3, r2
 8000816:	b21b      	sxth	r3, r3
 8000818:	b29b      	uxth	r3, r3
	sprintf(str,
 800081a:	613b      	str	r3, [r7, #16]
				(uint16_t)(dat1_buf[8]<<8 | dat1_buf[9]),
 800081c:	4b4c      	ldr	r3, [pc, #304]	; (8000950 <make_string+0x1ac>)
 800081e:	7a1b      	ldrb	r3, [r3, #8]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	b21a      	sxth	r2, r3
 8000824:	4b4a      	ldr	r3, [pc, #296]	; (8000950 <make_string+0x1ac>)
 8000826:	7a5b      	ldrb	r3, [r3, #9]
 8000828:	b21b      	sxth	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	b21b      	sxth	r3, r3
 800082e:	b29b      	uxth	r3, r3
	sprintf(str,
 8000830:	60fb      	str	r3, [r7, #12]
				(uint16_t)(dat1_buf[10]<<8 | dat1_buf[11]),
 8000832:	4b47      	ldr	r3, [pc, #284]	; (8000950 <make_string+0x1ac>)
 8000834:	7a9b      	ldrb	r3, [r3, #10]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	4b45      	ldr	r3, [pc, #276]	; (8000950 <make_string+0x1ac>)
 800083c:	7adb      	ldrb	r3, [r3, #11]
 800083e:	b21b      	sxth	r3, r3
 8000840:	4313      	orrs	r3, r2
 8000842:	b21b      	sxth	r3, r3
 8000844:	b29b      	uxth	r3, r3
	sprintf(str,
 8000846:	60bb      	str	r3, [r7, #8]
				(uint16_t)(dat1_buf[12]<<8 | dat1_buf[13]),
 8000848:	4b41      	ldr	r3, [pc, #260]	; (8000950 <make_string+0x1ac>)
 800084a:	7b1b      	ldrb	r3, [r3, #12]
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b21a      	sxth	r2, r3
 8000850:	4b3f      	ldr	r3, [pc, #252]	; (8000950 <make_string+0x1ac>)
 8000852:	7b5b      	ldrb	r3, [r3, #13]
 8000854:	b21b      	sxth	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b21b      	sxth	r3, r3
 800085a:	b29b      	uxth	r3, r3
	sprintf(str,
 800085c:	607b      	str	r3, [r7, #4]

				(uint16_t)(dat2_buf[0]<<8 | dat2_buf[1]),
 800085e:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <make_string+0x1b0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <make_string+0x1b0>)
 8000868:	785b      	ldrb	r3, [r3, #1]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21b      	sxth	r3, r3
 8000870:	b29b      	uxth	r3, r3
	sprintf(str,
 8000872:	603b      	str	r3, [r7, #0]
				(uint16_t)(dat2_buf[2]<<8 | dat2_buf[3]),
 8000874:	4b37      	ldr	r3, [pc, #220]	; (8000954 <make_string+0x1b0>)
 8000876:	789b      	ldrb	r3, [r3, #2]
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	b21a      	sxth	r2, r3
 800087c:	4b35      	ldr	r3, [pc, #212]	; (8000954 <make_string+0x1b0>)
 800087e:	78db      	ldrb	r3, [r3, #3]
 8000880:	b21b      	sxth	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b21b      	sxth	r3, r3
 8000886:	b29b      	uxth	r3, r3
	sprintf(str,
 8000888:	461e      	mov	r6, r3
				(uint16_t)(dat2_buf[4]<<8 | dat2_buf[5]),
 800088a:	4b32      	ldr	r3, [pc, #200]	; (8000954 <make_string+0x1b0>)
 800088c:	791b      	ldrb	r3, [r3, #4]
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	b21a      	sxth	r2, r3
 8000892:	4b30      	ldr	r3, [pc, #192]	; (8000954 <make_string+0x1b0>)
 8000894:	795b      	ldrb	r3, [r3, #5]
 8000896:	b21b      	sxth	r3, r3
 8000898:	4313      	orrs	r3, r2
 800089a:	b21b      	sxth	r3, r3
 800089c:	b29b      	uxth	r3, r3
	sprintf(str,
 800089e:	461d      	mov	r5, r3
				(uint16_t)(dat2_buf[6]<<8 | dat2_buf[7]),
 80008a0:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <make_string+0x1b0>)
 80008a2:	799b      	ldrb	r3, [r3, #6]
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <make_string+0x1b0>)
 80008aa:	79db      	ldrb	r3, [r3, #7]
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	b29b      	uxth	r3, r3
	sprintf(str,
 80008b4:	461c      	mov	r4, r3
				(uint16_t)(dat2_buf[8]<<8 | dat2_buf[9]),
 80008b6:	4b27      	ldr	r3, [pc, #156]	; (8000954 <make_string+0x1b0>)
 80008b8:	7a1b      	ldrb	r3, [r3, #8]
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	b21a      	sxth	r2, r3
 80008be:	4b25      	ldr	r3, [pc, #148]	; (8000954 <make_string+0x1b0>)
 80008c0:	7a5b      	ldrb	r3, [r3, #9]
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	b29b      	uxth	r3, r3
	sprintf(str,
 80008ca:	4618      	mov	r0, r3
				(uint16_t)(dat2_buf[10]<<8 | dat2_buf[11]),
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <make_string+0x1b0>)
 80008ce:	7a9b      	ldrb	r3, [r3, #10]
 80008d0:	021b      	lsls	r3, r3, #8
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <make_string+0x1b0>)
 80008d6:	7adb      	ldrb	r3, [r3, #11]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21b      	sxth	r3, r3
 80008de:	b29b      	uxth	r3, r3
	sprintf(str,
 80008e0:	4619      	mov	r1, r3
				(uint16_t)(dat2_buf[12]<<8 | dat2_buf[13]),
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <make_string+0x1b0>)
 80008e4:	7b1b      	ldrb	r3, [r3, #12]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <make_string+0x1b0>)
 80008ec:	7b5b      	ldrb	r3, [r3, #13]
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	b29b      	uxth	r3, r3
	sprintf(str,
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <make_string+0x1b4>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	9310      	str	r3, [sp, #64]	; 0x40
 80008fe:	920f      	str	r2, [sp, #60]	; 0x3c
 8000900:	910e      	str	r1, [sp, #56]	; 0x38
 8000902:	900d      	str	r0, [sp, #52]	; 0x34
 8000904:	940c      	str	r4, [sp, #48]	; 0x30
 8000906:	950b      	str	r5, [sp, #44]	; 0x2c
 8000908:	960a      	str	r6, [sp, #40]	; 0x28
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	9209      	str	r2, [sp, #36]	; 0x24
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	9208      	str	r2, [sp, #32]
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	9207      	str	r2, [sp, #28]
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	9206      	str	r2, [sp, #24]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	9205      	str	r2, [sp, #20]
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	9204      	str	r2, [sp, #16]
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	9203      	str	r2, [sp, #12]
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	9202      	str	r2, [sp, #8]
 800092a:	6a3a      	ldr	r2, [r7, #32]
 800092c:	9201      	str	r2, [sp, #4]
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	4673      	mov	r3, lr
 8000934:	4662      	mov	r2, ip
 8000936:	4909      	ldr	r1, [pc, #36]	; (800095c <make_string+0x1b8>)
 8000938:	4809      	ldr	r0, [pc, #36]	; (8000960 <make_string+0x1bc>)
 800093a:	f006 f935 	bl	8006ba8 <siprintf>

				delta_t
	);
}
 800093e:	bf00      	nop
 8000940:	372c      	adds	r7, #44	; 0x2c
 8000942:	46bd      	mov	sp, r7
 8000944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000946:	bf00      	nop
 8000948:	20000094 	.word	0x20000094
 800094c:	2000008c 	.word	0x2000008c
 8000950:	2000033c 	.word	0x2000033c
 8000954:	2000022c 	.word	0x2000022c
 8000958:	200000b4 	.word	0x200000b4
 800095c:	080073d4 	.word	0x080073d4
 8000960:	2000034c 	.word	0x2000034c

08000964 <cp>:
	for (uint16_t i=0; i<n; i++) {
		;
	}
}

void cp() {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i<N_BYTES; i++) {
 800096a:	2300      	movs	r3, #0
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	e00e      	b.n	800098e <cp+0x2a>
		dat1_buf[i] = dat1[i];
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	490a      	ldr	r1, [pc, #40]	; (80009a0 <cp+0x3c>)
 8000976:	5c89      	ldrb	r1, [r1, r2]
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <cp+0x40>)
 800097a:	54d1      	strb	r1, [r2, r3]
		dat2_buf[i] = dat2[i];
 800097c:	79fa      	ldrb	r2, [r7, #7]
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	4909      	ldr	r1, [pc, #36]	; (80009a8 <cp+0x44>)
 8000982:	5c89      	ldrb	r1, [r1, r2]
 8000984:	4a09      	ldr	r2, [pc, #36]	; (80009ac <cp+0x48>)
 8000986:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<N_BYTES; i++) {
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	3301      	adds	r3, #1
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d9ed      	bls.n	8000970 <cp+0xc>
		//dat3_buf[i] = dat3[i];
		//dat4_buf[i] = dat4[i];
	}
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	2000031c 	.word	0x2000031c
 80009a4:	2000033c 	.word	0x2000033c
 80009a8:	2000032c 	.word	0x2000032c
 80009ac:	2000022c 	.word	0x2000022c

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b4:	f000 fdb2 	bl	800151c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b8:	f000 f8a4 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009bc:	f000 fa50 	bl	8000e60 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c0:	f000 fa1e 	bl	8000e00 <MX_DMA_Init>
  MX_I2C1_Init();
 80009c4:	f000 f924 	bl	8000c10 <MX_I2C1_Init>
  MX_I2C2_Init();
 80009c8:	f000 f950 	bl	8000c6c <MX_I2C2_Init>
  MX_UART4_Init();
 80009cc:	f000 f9ee 	bl	8000dac <MX_UART4_Init>
  MX_RTC_Init();
 80009d0:	f000 f97a 	bl	8000cc8 <MX_RTC_Init>
  MX_TIM2_Init();
 80009d4:	f000 f99e 	bl	8000d14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80009d8:	2008      	movs	r0, #8
 80009da:	f000 ff38 	bl	800184e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80009de:	2009      	movs	r0, #9
 80009e0:	f000 ff35 	bl	800184e <HAL_NVIC_DisableIRQ>
  HAL_TIM_Base_Start(&htim2);
 80009e4:	4839      	ldr	r0, [pc, #228]	; (8000acc <main+0x11c>)
 80009e6:	f004 ff06 	bl	80057f6 <HAL_TIM_Base_Start>
  setup_mpu();
 80009ea:	f7ff fe1d 	bl	8000628 <setup_mpu>
  //while(1) {
  //	;
  //}
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) != GPIO_PIN_SET) {
 80009ee:	bf00      	nop
 80009f0:	2108      	movs	r1, #8
 80009f2:	4837      	ldr	r0, [pc, #220]	; (8000ad0 <main+0x120>)
 80009f4:	f001 fc8a 	bl	800230c <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d1f8      	bne.n	80009f0 <main+0x40>
  	;
  }
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009fe:	2008      	movs	r0, #8
 8000a00:	f000 ff17 	bl	8001832 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a04:	2009      	movs	r0, #9
 8000a06:	f000 ff14 	bl	8001832 <HAL_NVIC_EnableIRQ>
  while(flag_is_main_part == 0) {
 8000a0a:	e006      	b.n	8000a1a <main+0x6a>
  	if (flag_t2_read == 1) {
 8000a0c:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <main+0x124>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d102      	bne.n	8000a1a <main+0x6a>
  		flag_t2_read = 0;
 8000a14:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <main+0x124>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
  while(flag_is_main_part == 0) {
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <main+0x128>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0f4      	beq.n	8000a0c <main+0x5c>
  	}
  }
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000a22:	2008      	movs	r0, #8
 8000a24:	f000 ff13 	bl	800184e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000a28:	2009      	movs	r0, #9
 8000a2a:	f000 ff10 	bl	800184e <HAL_NVIC_DisableIRQ>
  //make_string2();
	//HAL_UART_Transmit_DMA(&huart4, str2, N_CHARS2);
  delta_t = (uint16_t)(t2 - t1);
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <main+0x12c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <main+0x130>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <main+0x134>)
 8000a40:	801a      	strh	r2, [r3, #0]
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a42:	2009      	movs	r0, #9
 8000a44:	f000 fef5 	bl	8001832 <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (flag_to_read_values == 1) {
 8000a48:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <main+0x138>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d1fb      	bne.n	8000a48 <main+0x98>
			HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000a50:	2009      	movs	r0, #9
 8000a52:	f000 fefc 	bl	800184e <HAL_NVIC_DisableIRQ>
			flag_to_read_values = 0;
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <main+0x138>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
			count++;
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <main+0x13c>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <main+0x13c>)
 8000a66:	801a      	strh	r2, [r3, #0]
			cp();
 8000a68:	f7ff ff7c 	bl	8000964 <cp>
			i2c_transaction(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff fe49 	bl	8000704 <i2c_transaction>
			i2c_transaction(2);
 8000a72:	2002      	movs	r0, #2
 8000a74:	f7ff fe46 	bl	8000704 <i2c_transaction>
			make_string();
 8000a78:	f7ff fe94 	bl	80007a4 <make_string>
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
			//delay(5000);//400//4000
			//i2c_transaction(4);
			//i2c_transaction(3);
			//delay(5000);
			HAL_UART_Transmit_DMA(&huart4, str, N_CHARS);
 8000a7c:	225b      	movs	r2, #91	; 0x5b
 8000a7e:	491c      	ldr	r1, [pc, #112]	; (8000af0 <main+0x140>)
 8000a80:	481c      	ldr	r0, [pc, #112]	; (8000af4 <main+0x144>)
 8000a82:	f005 f997 	bl	8005db4 <HAL_UART_Transmit_DMA>
			//delay(5000);//18000
			if (count & 128) { HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);}//256>>2
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <main+0x13c>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d004      	beq.n	8000a9c <main+0xec>
 8000a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a96:	4818      	ldr	r0, [pc, #96]	; (8000af8 <main+0x148>)
 8000a98:	f001 fc69 	bl	800236e <HAL_GPIO_TogglePin>
			if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_2) != RESET) {
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <main+0x14c>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <main+0xfe>
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <main+0x14c>)
 8000aaa:	2204      	movs	r2, #4
 8000aac:	615a      	str	r2, [r3, #20]
			}
			HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000aae:	2009      	movs	r0, #9
 8000ab0:	f000 febf 	bl	8001832 <HAL_NVIC_EnableIRQ>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, sTime1.Seconds%2);
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <main+0x150>)
 8000ab6:	789b      	ldrb	r3, [r3, #2]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <main+0x148>)
 8000ac6:	f001 fc39 	bl	800233c <HAL_GPIO_WritePin>
		if (flag_to_read_values == 1) {
 8000aca:	e7bd      	b.n	8000a48 <main+0x98>
 8000acc:	200002dc 	.word	0x200002dc
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	200000b6 	.word	0x200000b6
 8000ad8:	2000008f 	.word	0x2000008f
 8000adc:	200000b0 	.word	0x200000b0
 8000ae0:	200000ac 	.word	0x200000ac
 8000ae4:	200000b4 	.word	0x200000b4
 8000ae8:	2000008e 	.word	0x2000008e
 8000aec:	2000008c 	.word	0x2000008c
 8000af0:	2000034c 	.word	0x2000034c
 8000af4:	2000029c 	.word	0x2000029c
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	40013c00 	.word	0x40013c00
 8000b00:	20000094 	.word	0x20000094

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b098      	sub	sp, #96	; 0x60
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b0e:	2230      	movs	r2, #48	; 0x30
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f006 f840 	bl	8006b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <SystemClock_Config+0x100>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <SystemClock_Config+0x100>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <SystemClock_Config+0x100>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <SystemClock_Config+0x104>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a2b      	ldr	r2, [pc, #172]	; (8000c08 <SystemClock_Config+0x104>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <SystemClock_Config+0x104>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b82:	2305      	movs	r3, #5
 8000b84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b86:	2360      	movs	r3, #96	; 0x60
 8000b88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 fea6 	bl	80048e8 <HAL_RCC_OscConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000ba2:	f000 f9ff 	bl	8000fa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000baa:	2302      	movs	r3, #2
 8000bac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f004 f900 	bl	8004dc8 <HAL_RCC_ClockConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000bce:	f000 f9e9 	bl	8000fa4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <SystemClock_Config+0x108>)
 8000bd8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 fb4c 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000bea:	f000 f9db 	bl	8000fa4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_4);
 8000bee:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f004 f9cd 	bl	8004f94 <HAL_RCC_MCOConfig>
}
 8000bfa:	bf00      	nop
 8000bfc:	3760      	adds	r7, #96	; 0x60
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40007000 	.word	0x40007000
 8000c0c:	00190300 	.word	0x00190300

08000c10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_I2C1_Init+0x50>)
 8000c16:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <MX_I2C1_Init+0x54>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_I2C1_Init+0x50>)
 8000c1c:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <MX_I2C1_Init+0x58>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_I2C1_Init+0x50>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_I2C1_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_I2C1_Init+0x50>)
 8000c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <MX_I2C1_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_I2C1_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <MX_I2C1_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_I2C1_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <MX_I2C1_Init+0x50>)
 8000c4e:	f001 fbc1 	bl	80023d4 <HAL_I2C_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c58:	f000 f9a4 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200000d4 	.word	0x200000d4
 8000c64:	40005400 	.word	0x40005400
 8000c68:	00061a80 	.word	0x00061a80

08000c6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_I2C2_Init+0x50>)
 8000c72:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <MX_I2C2_Init+0x54>)
 8000c74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_I2C2_Init+0x50>)
 8000c78:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_I2C2_Init+0x58>)
 8000c7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_I2C2_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_I2C2_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_I2C2_Init+0x50>)
 8000c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c8e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_I2C2_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_I2C2_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <MX_I2C2_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_I2C2_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_I2C2_Init+0x50>)
 8000caa:	f001 fb93 	bl	80023d4 <HAL_I2C_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000cb4:	f000 f976 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000138 	.word	0x20000138
 8000cc0:	40005800 	.word	0x40005800
 8000cc4:	00061a80 	.word	0x00061a80

08000cc8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_RTC_Init+0x44>)
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <MX_RTC_Init+0x48>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_RTC_Init+0x44>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32-1;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_RTC_Init+0x44>)
 8000cda:	221f      	movs	r2, #31
 8000cdc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_RTC_Init+0x44>)
 8000ce0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ce4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_RTC_Init+0x44>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <MX_RTC_Init+0x44>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_RTC_Init+0x44>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_RTC_Init+0x44>)
 8000cfa:	f004 fba1 	bl	8005440 <HAL_RTC_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8000d04:	f000 f94e 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000020c 	.word	0x2000020c
 8000d10:	40002800 	.word	0x40002800

08000d14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3 - 1;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296 - 1;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d58:	4813      	ldr	r0, [pc, #76]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d5a:	f004 fd21 	bl	80057a0 <HAL_TIM_Base_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d64:	f000 f91e 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	4619      	mov	r1, r3
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d76:	f004 fd62 	bl	800583e <HAL_TIM_ConfigClockSource>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d80:	f000 f910 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d92:	f004 ff45 	bl	8005c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d9c:	f000 f902 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200002dc 	.word	0x200002dc

08000dac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <MX_UART4_Init+0x48>)
 8000db2:	4a11      	ldr	r2, [pc, #68]	; (8000df8 <MX_UART4_Init+0x4c>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_UART4_Init+0x48>)
 8000db8:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <MX_UART4_Init+0x50>)
 8000dba:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <MX_UART4_Init+0x48>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_UART4_Init+0x48>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <MX_UART4_Init+0x48>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_UART4_Init+0x48>)
 8000dd0:	220c      	movs	r2, #12
 8000dd2:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <MX_UART4_Init+0x48>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_UART4_Init+0x48>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <MX_UART4_Init+0x48>)
 8000de2:	f004 ff99 	bl	8005d18 <HAL_UART_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 8000dec:	f000 f8da 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2000029c 	.word	0x2000029c
 8000df8:	40004c00 	.word	0x40004c00
 8000dfc:	001e8480 	.word	0x001e8480

08000e00 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_DMA_Init+0x5c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <MX_DMA_Init+0x5c>)
 8000e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_DMA_Init+0x5c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	200b      	movs	r0, #11
 8000e28:	f000 fce7 	bl	80017fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e2c:	200b      	movs	r0, #11
 8000e2e:	f000 fd00 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	200e      	movs	r0, #14
 8000e38:	f000 fcdf 	bl	80017fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e3c:	200e      	movs	r0, #14
 8000e3e:	f000 fcf8 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	200f      	movs	r0, #15
 8000e48:	f000 fcd7 	bl	80017fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e4c:	200f      	movs	r0, #15
 8000e4e:	f000 fcf0 	bl	8001832 <HAL_NVIC_EnableIRQ>

}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b45      	ldr	r3, [pc, #276]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a44      	ldr	r2, [pc, #272]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a3d      	ldr	r2, [pc, #244]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a36      	ldr	r2, [pc, #216]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <MX_GPIO_Init+0x130>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f08:	4822      	ldr	r0, [pc, #136]	; (8000f94 <MX_GPIO_Init+0x134>)
 8000f0a:	f001 fa17 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f0e:	230c      	movs	r3, #12
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_GPIO_Init+0x138>)
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481e      	ldr	r0, [pc, #120]	; (8000f9c <MX_GPIO_Init+0x13c>)
 8000f22:	f001 f859 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f26:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4815      	ldr	r0, [pc, #84]	; (8000f94 <MX_GPIO_Init+0x134>)
 8000f40:	f001 f84a 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000f62:	f001 f839 	bl	8001fd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2008      	movs	r0, #8
 8000f6c:	f000 fc45 	bl	80017fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f70:	2008      	movs	r0, #8
 8000f72:	f000 fc5e 	bl	8001832 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2009      	movs	r0, #9
 8000f7c:	f000 fc3d 	bl	80017fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f80:	2009      	movs	r0, #9
 8000f82:	f000 fc56 	bl	8001832 <HAL_NVIC_EnableIRQ>

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	10110000 	.word	0x10110000
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020800 	.word	0x40020800

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <HAL_MspInit+0x4c>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_MspInit+0x4c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a08      	ldr	r2, [pc, #32]	; (8001000 <HAL_MspInit+0x4c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800

08001004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a68      	ldr	r2, [pc, #416]	; (80011c4 <HAL_I2C_MspInit+0x1c0>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d162      	bne.n	80010ec <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	4b67      	ldr	r3, [pc, #412]	; (80011c8 <HAL_I2C_MspInit+0x1c4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a66      	ldr	r2, [pc, #408]	; (80011c8 <HAL_I2C_MspInit+0x1c4>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b64      	ldr	r3, [pc, #400]	; (80011c8 <HAL_I2C_MspInit+0x1c4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001042:	23c0      	movs	r3, #192	; 0xc0
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001046:	2312      	movs	r3, #18
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104a:	2301      	movs	r3, #1
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001052:	2304      	movs	r3, #4
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	485b      	ldr	r0, [pc, #364]	; (80011cc <HAL_I2C_MspInit+0x1c8>)
 800105e:	f000 ffbb 	bl	8001fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	4b58      	ldr	r3, [pc, #352]	; (80011c8 <HAL_I2C_MspInit+0x1c4>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a57      	ldr	r2, [pc, #348]	; (80011c8 <HAL_I2C_MspInit+0x1c4>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b55      	ldr	r3, [pc, #340]	; (80011c8 <HAL_I2C_MspInit+0x1c4>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800107e:	4b54      	ldr	r3, [pc, #336]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 8001080:	4a54      	ldr	r2, [pc, #336]	; (80011d4 <HAL_I2C_MspInit+0x1d0>)
 8001082:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001084:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 8001086:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800108a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108c:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001092:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001098:	4b4d      	ldr	r3, [pc, #308]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 800109a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a0:	4b4b      	ldr	r3, [pc, #300]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a6:	4b4a      	ldr	r3, [pc, #296]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80010ac:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010b2:	4b47      	ldr	r3, [pc, #284]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b8:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80010be:	4844      	ldr	r0, [pc, #272]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 80010c0:	f000 fbe0 	bl	8001884 <HAL_DMA_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80010ca:	f7ff ff6b 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a3f      	ldr	r2, [pc, #252]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 80010d2:	639a      	str	r2, [r3, #56]	; 0x38
 80010d4:	4a3e      	ldr	r2, [pc, #248]	; (80011d0 <HAL_I2C_MspInit+0x1cc>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	201f      	movs	r0, #31
 80010e0:	f000 fb8b 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010e4:	201f      	movs	r0, #31
 80010e6:	f000 fba4 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010ea:	e067      	b.n	80011bc <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a39      	ldr	r2, [pc, #228]	; (80011d8 <HAL_I2C_MspInit+0x1d4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d162      	bne.n	80011bc <HAL_I2C_MspInit+0x1b8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <HAL_I2C_MspInit+0x1c4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a32      	ldr	r2, [pc, #200]	; (80011c8 <HAL_I2C_MspInit+0x1c4>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <HAL_I2C_MspInit+0x1c4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001112:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001118:	2312      	movs	r3, #18
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111c:	2301      	movs	r3, #1
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001124:	2304      	movs	r3, #4
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	4827      	ldr	r0, [pc, #156]	; (80011cc <HAL_I2C_MspInit+0x1c8>)
 8001130:	f000 ff52 	bl	8001fd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <HAL_I2C_MspInit+0x1c4>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <HAL_I2C_MspInit+0x1c4>)
 800113e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_I2C_MspInit+0x1c4>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 8001152:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <HAL_I2C_MspInit+0x1dc>)
 8001154:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 8001158:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800115c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 800116c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001170:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001190:	4812      	ldr	r0, [pc, #72]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 8001192:	f000 fb77 	bl	8001884 <HAL_DMA_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_I2C_MspInit+0x19c>
      Error_Handler();
 800119c:	f7ff ff02 	bl	8000fa4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 80011a4:	639a      	str	r2, [r3, #56]	; 0x38
 80011a6:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <HAL_I2C_MspInit+0x1d8>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2021      	movs	r0, #33	; 0x21
 80011b2:	f000 fb22 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80011b6:	2021      	movs	r0, #33	; 0x21
 80011b8:	f000 fb3b 	bl	8001832 <HAL_NVIC_EnableIRQ>
}
 80011bc:	bf00      	nop
 80011be:	3730      	adds	r7, #48	; 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40005400 	.word	0x40005400
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020400 	.word	0x40020400
 80011d0:	2000023c 	.word	0x2000023c
 80011d4:	40026010 	.word	0x40026010
 80011d8:	40005800 	.word	0x40005800
 80011dc:	2000019c 	.word	0x2000019c
 80011e0:	40026058 	.word	0x40026058

080011e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a05      	ldr	r2, [pc, #20]	; (8001208 <HAL_RTC_MspInit+0x24>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d102      	bne.n	80011fc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_RTC_MspInit+0x28>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40002800 	.word	0x40002800
 800120c:	42470e3c 	.word	0x42470e3c

08001210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001220:	d10d      	bne.n	800123e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_TIM_Base_MspInit+0x3c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_TIM_Base_MspInit+0x3c>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_TIM_Base_MspInit+0x3c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a34      	ldr	r2, [pc, #208]	; (8001340 <HAL_UART_MspInit+0xf0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d161      	bne.n	8001336 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b33      	ldr	r3, [pc, #204]	; (8001344 <HAL_UART_MspInit+0xf4>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a32      	ldr	r2, [pc, #200]	; (8001344 <HAL_UART_MspInit+0xf4>)
 800127c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_UART_MspInit+0xf4>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <HAL_UART_MspInit+0xf4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a2b      	ldr	r2, [pc, #172]	; (8001344 <HAL_UART_MspInit+0xf4>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <HAL_UART_MspInit+0xf4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012aa:	2303      	movs	r3, #3
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012ba:	2308      	movs	r3, #8
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4820      	ldr	r0, [pc, #128]	; (8001348 <HAL_UART_MspInit+0xf8>)
 80012c6:	f000 fe87 	bl	8001fd8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_UART_MspInit+0xfc>)
 80012cc:	4a20      	ldr	r2, [pc, #128]	; (8001350 <HAL_UART_MspInit+0x100>)
 80012ce:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_UART_MspInit+0xfc>)
 80012d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <HAL_UART_MspInit+0xfc>)
 80012da:	2240      	movs	r2, #64	; 0x40
 80012dc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_UART_MspInit+0xfc>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_UART_MspInit+0xfc>)
 80012e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ea:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_UART_MspInit+0xfc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <HAL_UART_MspInit+0xfc>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_UART_MspInit+0xfc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_UART_MspInit+0xfc>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_UART_MspInit+0xfc>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800130a:	4810      	ldr	r0, [pc, #64]	; (800134c <HAL_UART_MspInit+0xfc>)
 800130c:	f000 faba 	bl	8001884 <HAL_DMA_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001316:	f7ff fe45 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a0b      	ldr	r2, [pc, #44]	; (800134c <HAL_UART_MspInit+0xfc>)
 800131e:	631a      	str	r2, [r3, #48]	; 0x30
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <HAL_UART_MspInit+0xfc>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2034      	movs	r0, #52	; 0x34
 800132c:	f000 fa65 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001330:	2034      	movs	r0, #52	; 0x34
 8001332:	f000 fa7e 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40004c00 	.word	0x40004c00
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000
 800134c:	200003d0 	.word	0x200003d0
 8001350:	40026070 	.word	0x40026070

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 f90a 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80013b4:	2004      	movs	r0, #4
 80013b6:	f000 fff5 	bl	80023a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}

080013be <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80013c2:	2008      	movs	r0, #8
 80013c4:	f000 ffee 	bl	80023a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <DMA1_Stream0_IRQHandler+0x10>)
 80013d2:	f000 fb7f 	bl	8001ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000023c 	.word	0x2000023c

080013e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <DMA1_Stream3_IRQHandler+0x10>)
 80013e6:	f000 fb75 	bl	8001ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000019c 	.word	0x2000019c

080013f4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <DMA1_Stream4_IRQHandler+0x10>)
 80013fa:	f000 fb6b 	bl	8001ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200003d0 	.word	0x200003d0

08001408 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <I2C1_EV_IRQHandler+0x10>)
 800140e:	f001 fb5f 	bl	8002ad0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000d4 	.word	0x200000d4

0800141c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <I2C2_EV_IRQHandler+0x10>)
 8001422:	f001 fb55 	bl	8002ad0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000138 	.word	0x20000138

08001430 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <UART4_IRQHandler+0x10>)
 8001436:	f004 fd29 	bl	8005e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000029c 	.word	0x2000029c

08001444 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x50>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x16>
		heap_end = &end;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <_sbrk+0x50>)
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <_sbrk+0x54>)
 8001458:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <_sbrk+0x50>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <_sbrk+0x50>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	466a      	mov	r2, sp
 800146a:	4293      	cmp	r3, r2
 800146c:	d907      	bls.n	800147e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800146e:	f005 fb69 	bl	8006b44 <__errno>
 8001472:	4602      	mov	r2, r0
 8001474:	230c      	movs	r3, #12
 8001476:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147c:	e006      	b.n	800148c <_sbrk+0x48>
	}

	heap_end += incr;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <_sbrk+0x50>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a03      	ldr	r2, [pc, #12]	; (8001494 <_sbrk+0x50>)
 8001488:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200000b8 	.word	0x200000b8
 8001498:	20000438 	.word	0x20000438

0800149c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <SystemInit+0x28>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a6:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <SystemInit+0x28>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SystemInit+0x28>)
 80014b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b6:	609a      	str	r2, [r3, #8]
#endif
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ce:	e003      	b.n	80014d8 <LoopCopyDataInit>

080014d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014d6:	3104      	adds	r1, #4

080014d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014e0:	d3f6      	bcc.n	80014d0 <CopyDataInit>
  ldr  r2, =_sbss
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014e4:	e002      	b.n	80014ec <LoopFillZerobss>

080014e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014e8:	f842 3b04 	str.w	r3, [r2], #4

080014ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014f0:	d3f9      	bcc.n	80014e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014f2:	f7ff ffd3 	bl	800149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f6:	f005 fb2b 	bl	8006b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fa:	f7ff fa59 	bl	80009b0 <main>
  bx  lr    
 80014fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001500:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001504:	080074ac 	.word	0x080074ac
  ldr  r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800150c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001510:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001514:	20000438 	.word	0x20000438

08001518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC_IRQHandler>
	...

0800151c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <HAL_Init+0x40>)
 8001526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_Init+0x40>)
 8001532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_Init+0x40>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 f94d 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154a:	2000      	movs	r0, #0
 800154c:	f000 f808 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001550:	f7ff fd30 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x54>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x58>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f973 	bl	800186a <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00e      	b.n	80015ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d80a      	bhi.n	80015aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800159c:	f000 f92d 	bl	80017fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <HAL_InitTick+0x5c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000004 	.word	0x20000004

080015c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x20>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x24>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <HAL_IncTick+0x24>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000430 	.word	0x20000430

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <HAL_GetTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000430 	.word	0x20000430

08001600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0b      	blt.n	800168e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	4907      	ldr	r1, [pc, #28]	; (800169c <__NVIC_EnableIRQ+0x38>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	2001      	movs	r0, #1
 8001686:	fa00 f202 	lsl.w	r2, r0, r2
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db10      	blt.n	80016d4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4909      	ldr	r1, [pc, #36]	; (80016e0 <__NVIC_DisableIRQ+0x40>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	3320      	adds	r3, #32
 80016c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0a      	blt.n	800170e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <__NVIC_SetPriority+0x4c>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	440b      	add	r3, r1
 8001708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800170c:	e00a      	b.n	8001724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4908      	ldr	r1, [pc, #32]	; (8001734 <__NVIC_SetPriority+0x50>)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3b04      	subs	r3, #4
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	440b      	add	r3, r1
 8001722:	761a      	strb	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f1c3 0307 	rsb	r3, r3, #7
 8001752:	2b04      	cmp	r3, #4
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3304      	adds	r3, #4
 800175e:	2b06      	cmp	r3, #6
 8001760:	d902      	bls.n	8001768 <NVIC_EncodePriority+0x30>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b03      	subs	r3, #3
 8001766:	e000      	b.n	800176a <NVIC_EncodePriority+0x32>
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001780:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43d9      	mvns	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	4313      	orrs	r3, r2
         );
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017c4:	f7ff ff8e 	bl	80016e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff07 	bl	8001600 <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff1c 	bl	8001648 <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff8e 	bl	8001738 <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5d 	bl	80016e4 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff0f 	bl	8001664 <__NVIC_EnableIRQ>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff1f 	bl	80016a0 <__NVIC_DisableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ff94 	bl	80017a0 <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff feaa 	bl	80015e8 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e099      	b.n	80019d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2202      	movs	r2, #2
 80018ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c0:	e00f      	b.n	80018e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c2:	f7ff fe91 	bl	80015e8 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d908      	bls.n	80018e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2220      	movs	r2, #32
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e078      	b.n	80019d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1e8      	bne.n	80018c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	4b38      	ldr	r3, [pc, #224]	; (80019dc <HAL_DMA_Init+0x158>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800190e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001926:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4313      	orrs	r3, r2
 8001932:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	2b04      	cmp	r3, #4
 800193a:	d107      	bne.n	800194c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4313      	orrs	r3, r2
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f023 0307 	bic.w	r3, r3, #7
 8001962:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	2b04      	cmp	r3, #4
 8001974:	d117      	bne.n	80019a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00e      	beq.n	80019a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 faab 	bl	8001ee4 <DMA_CheckFifoParam>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2240      	movs	r2, #64	; 0x40
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019a2:	2301      	movs	r3, #1
 80019a4:	e016      	b.n	80019d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fa62 	bl	8001e78 <DMA_CalcBaseAndBitshift>
 80019b4:	4603      	mov	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	223f      	movs	r2, #63	; 0x3f
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	f010803f 	.word	0xf010803f

080019e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_DMA_Start_IT+0x26>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e040      	b.n	8001a88 <HAL_DMA_Start_IT+0xa8>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d12f      	bne.n	8001a7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f9f4 	bl	8001e1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	223f      	movs	r2, #63	; 0x3f
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0216 	orr.w	r2, r2, #22
 8001a4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d007      	beq.n	8001a68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0208 	orr.w	r2, r2, #8
 8001a66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e005      	b.n	8001a86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a82:	2302      	movs	r3, #2
 8001a84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d004      	beq.n	8001aae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00c      	b.n	8001ac8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2205      	movs	r2, #5
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0201 	bic.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ae0:	4b92      	ldr	r3, [pc, #584]	; (8001d2c <HAL_DMA_IRQHandler+0x258>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a92      	ldr	r2, [pc, #584]	; (8001d30 <HAL_DMA_IRQHandler+0x25c>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0a9b      	lsrs	r3, r3, #10
 8001aec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afe:	2208      	movs	r2, #8
 8001b00:	409a      	lsls	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d01a      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0204 	bic.w	r2, r2, #4
 8001b26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	2201      	movs	r2, #1
 8001b46:	409a      	lsls	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d012      	beq.n	8001b76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	2201      	movs	r2, #1
 8001b64:	409a      	lsls	r2, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	f043 0202 	orr.w	r2, r3, #2
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d012      	beq.n	8001bac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00b      	beq.n	8001bac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	2204      	movs	r2, #4
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	f043 0204 	orr.w	r2, r3, #4
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d043      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d03c      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bce:	2210      	movs	r2, #16
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d018      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d108      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d024      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	4798      	blx	r3
 8001c02:	e01f      	b.n	8001c44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01b      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
 8001c14:	e016      	b.n	8001c44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d107      	bne.n	8001c34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0208 	bic.w	r2, r2, #8
 8001c32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	2220      	movs	r2, #32
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 808e 	beq.w	8001d72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 8086 	beq.w	8001d72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d136      	bne.n	8001cec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0216 	bic.w	r2, r2, #22
 8001c8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <HAL_DMA_IRQHandler+0x1da>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0208 	bic.w	r2, r2, #8
 8001cbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	223f      	movs	r2, #63	; 0x3f
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d07d      	beq.n	8001dde <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	4798      	blx	r3
        }
        return;
 8001cea:	e078      	b.n	8001dde <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01c      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d108      	bne.n	8001d1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d030      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	4798      	blx	r3
 8001d18:	e02b      	b.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d027      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
 8001d2a:	e022      	b.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10f      	bne.n	8001d62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0210 	bic.w	r2, r2, #16
 8001d50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d032      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d022      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2205      	movs	r2, #5
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d307      	bcc.n	8001dba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f2      	bne.n	8001d9e <HAL_DMA_IRQHandler+0x2ca>
 8001db8:	e000      	b.n	8001dbc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001dba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
 8001ddc:	e000      	b.n	8001de0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dde:	bf00      	nop
    }
  }
}
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop

08001de8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df6:	b2db      	uxtb	r3, r3
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b40      	cmp	r3, #64	; 0x40
 8001e48:	d108      	bne.n	8001e5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e5a:	e007      	b.n	8001e6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	60da      	str	r2, [r3, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	3b10      	subs	r3, #16
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <DMA_CalcBaseAndBitshift+0x64>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e92:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <DMA_CalcBaseAndBitshift+0x68>)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d909      	bls.n	8001eba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eae:	f023 0303 	bic.w	r3, r3, #3
 8001eb2:	1d1a      	adds	r2, r3, #4
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	659a      	str	r2, [r3, #88]	; 0x58
 8001eb8:	e007      	b.n	8001eca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ec2:	f023 0303 	bic.w	r3, r3, #3
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	aaaaaaab 	.word	0xaaaaaaab
 8001ee0:	08007460 	.word	0x08007460

08001ee4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d11f      	bne.n	8001f3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d855      	bhi.n	8001fb0 <DMA_CheckFifoParam+0xcc>
 8001f04:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <DMA_CheckFifoParam+0x28>)
 8001f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0a:	bf00      	nop
 8001f0c:	08001f1d 	.word	0x08001f1d
 8001f10:	08001f2f 	.word	0x08001f2f
 8001f14:	08001f1d 	.word	0x08001f1d
 8001f18:	08001fb1 	.word	0x08001fb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d045      	beq.n	8001fb4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f2c:	e042      	b.n	8001fb4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f36:	d13f      	bne.n	8001fb8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f3c:	e03c      	b.n	8001fb8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f46:	d121      	bne.n	8001f8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d836      	bhi.n	8001fbc <DMA_CheckFifoParam+0xd8>
 8001f4e:	a201      	add	r2, pc, #4	; (adr r2, 8001f54 <DMA_CheckFifoParam+0x70>)
 8001f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f54:	08001f65 	.word	0x08001f65
 8001f58:	08001f6b 	.word	0x08001f6b
 8001f5c:	08001f65 	.word	0x08001f65
 8001f60:	08001f7d 	.word	0x08001f7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
      break;
 8001f68:	e02f      	b.n	8001fca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d024      	beq.n	8001fc0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f7a:	e021      	b.n	8001fc0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f84:	d11e      	bne.n	8001fc4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f8a:	e01b      	b.n	8001fc4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d902      	bls.n	8001f98 <DMA_CheckFifoParam+0xb4>
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d003      	beq.n	8001f9e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f96:	e018      	b.n	8001fca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f9c:	e015      	b.n	8001fca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00e      	beq.n	8001fc8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
      break;
 8001fae:	e00b      	b.n	8001fc8 <DMA_CheckFifoParam+0xe4>
      break;
 8001fb0:	bf00      	nop
 8001fb2:	e00a      	b.n	8001fca <DMA_CheckFifoParam+0xe6>
      break;
 8001fb4:	bf00      	nop
 8001fb6:	e008      	b.n	8001fca <DMA_CheckFifoParam+0xe6>
      break;
 8001fb8:	bf00      	nop
 8001fba:	e006      	b.n	8001fca <DMA_CheckFifoParam+0xe6>
      break;
 8001fbc:	bf00      	nop
 8001fbe:	e004      	b.n	8001fca <DMA_CheckFifoParam+0xe6>
      break;
 8001fc0:	bf00      	nop
 8001fc2:	e002      	b.n	8001fca <DMA_CheckFifoParam+0xe6>
      break;   
 8001fc4:	bf00      	nop
 8001fc6:	e000      	b.n	8001fca <DMA_CheckFifoParam+0xe6>
      break;
 8001fc8:	bf00      	nop
    }
  } 
  
  return status; 
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e16b      	b.n	80022cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	429a      	cmp	r2, r3
 800200e:	f040 815a 	bne.w	80022c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d00b      	beq.n	8002032 <HAL_GPIO_Init+0x5a>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002026:	2b11      	cmp	r3, #17
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b12      	cmp	r3, #18
 8002030:	d130      	bne.n	8002094 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0201 	and.w	r2, r3, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0xfc>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b12      	cmp	r3, #18
 80020d2:	d123      	bne.n	800211c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	08da      	lsrs	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3208      	adds	r2, #8
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0203 	and.w	r2, r3, #3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80b4 	beq.w	80022c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <HAL_GPIO_Init+0x308>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	4a5e      	ldr	r2, [pc, #376]	; (80022e0 <HAL_GPIO_Init+0x308>)
 8002168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800216c:	6453      	str	r3, [r2, #68]	; 0x44
 800216e:	4b5c      	ldr	r3, [pc, #368]	; (80022e0 <HAL_GPIO_Init+0x308>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800217a:	4a5a      	ldr	r2, [pc, #360]	; (80022e4 <HAL_GPIO_Init+0x30c>)
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3302      	adds	r3, #2
 8002182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	220f      	movs	r2, #15
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a51      	ldr	r2, [pc, #324]	; (80022e8 <HAL_GPIO_Init+0x310>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d02b      	beq.n	80021fe <HAL_GPIO_Init+0x226>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a50      	ldr	r2, [pc, #320]	; (80022ec <HAL_GPIO_Init+0x314>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d025      	beq.n	80021fa <HAL_GPIO_Init+0x222>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4f      	ldr	r2, [pc, #316]	; (80022f0 <HAL_GPIO_Init+0x318>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01f      	beq.n	80021f6 <HAL_GPIO_Init+0x21e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4e      	ldr	r2, [pc, #312]	; (80022f4 <HAL_GPIO_Init+0x31c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d019      	beq.n	80021f2 <HAL_GPIO_Init+0x21a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4d      	ldr	r2, [pc, #308]	; (80022f8 <HAL_GPIO_Init+0x320>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_GPIO_Init+0x216>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <HAL_GPIO_Init+0x324>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00d      	beq.n	80021ea <HAL_GPIO_Init+0x212>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4b      	ldr	r2, [pc, #300]	; (8002300 <HAL_GPIO_Init+0x328>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <HAL_GPIO_Init+0x20e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4a      	ldr	r2, [pc, #296]	; (8002304 <HAL_GPIO_Init+0x32c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d101      	bne.n	80021e2 <HAL_GPIO_Init+0x20a>
 80021de:	2307      	movs	r3, #7
 80021e0:	e00e      	b.n	8002200 <HAL_GPIO_Init+0x228>
 80021e2:	2308      	movs	r3, #8
 80021e4:	e00c      	b.n	8002200 <HAL_GPIO_Init+0x228>
 80021e6:	2306      	movs	r3, #6
 80021e8:	e00a      	b.n	8002200 <HAL_GPIO_Init+0x228>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e008      	b.n	8002200 <HAL_GPIO_Init+0x228>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x228>
 80021f2:	2303      	movs	r3, #3
 80021f4:	e004      	b.n	8002200 <HAL_GPIO_Init+0x228>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x228>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x228>
 80021fe:	2300      	movs	r3, #0
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	f002 0203 	and.w	r2, r2, #3
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	4093      	lsls	r3, r2
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002210:	4934      	ldr	r1, [pc, #208]	; (80022e4 <HAL_GPIO_Init+0x30c>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800221e:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_GPIO_Init+0x330>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002242:	4a31      	ldr	r2, [pc, #196]	; (8002308 <HAL_GPIO_Init+0x330>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002248:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <HAL_GPIO_Init+0x330>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226c:	4a26      	ldr	r2, [pc, #152]	; (8002308 <HAL_GPIO_Init+0x330>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002272:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_GPIO_Init+0x330>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_GPIO_Init+0x330>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_GPIO_Init+0x330>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c0:	4a11      	ldr	r2, [pc, #68]	; (8002308 <HAL_GPIO_Init+0x330>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	f67f ae90 	bls.w	8001ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	3724      	adds	r7, #36	; 0x24
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40013800 	.word	0x40013800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020c00 	.word	0x40020c00
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40021400 	.word	0x40021400
 8002300:	40021800 	.word	0x40021800
 8002304:	40021c00 	.word	0x40021c00
 8002308:	40013c00 	.word	0x40013c00

0800230c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e001      	b.n	800232e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
 8002348:	4613      	mov	r3, r2
 800234a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800234c:	787b      	ldrb	r3, [r7, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002358:	e003      	b.n	8002362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	041a      	lsls	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	619a      	str	r2, [r3, #24]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	401a      	ands	r2, r3
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	429a      	cmp	r2, r3
 8002386:	d104      	bne.n	8002392 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002388:	887b      	ldrh	r3, [r7, #2]
 800238a:	041a      	lsls	r2, r3, #16
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002390:	e002      	b.n	8002398 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	619a      	str	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d006      	beq.n	80023c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe f8de 	bl	8000584 <HAL_GPIO_EXTI_Callback>
  }
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40013c00 	.word	0x40013c00

080023d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e11f      	b.n	8002626 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fe02 	bl	8001004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002426:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002436:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002438:	f002 fef8 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 800243c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4a7b      	ldr	r2, [pc, #492]	; (8002630 <HAL_I2C_Init+0x25c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d807      	bhi.n	8002458 <HAL_I2C_Init+0x84>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a7a      	ldr	r2, [pc, #488]	; (8002634 <HAL_I2C_Init+0x260>)
 800244c:	4293      	cmp	r3, r2
 800244e:	bf94      	ite	ls
 8002450:	2301      	movls	r3, #1
 8002452:	2300      	movhi	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	e006      	b.n	8002466 <HAL_I2C_Init+0x92>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a77      	ldr	r2, [pc, #476]	; (8002638 <HAL_I2C_Init+0x264>)
 800245c:	4293      	cmp	r3, r2
 800245e:	bf94      	ite	ls
 8002460:	2301      	movls	r3, #1
 8002462:	2300      	movhi	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0db      	b.n	8002626 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a72      	ldr	r2, [pc, #456]	; (800263c <HAL_I2C_Init+0x268>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0c9b      	lsrs	r3, r3, #18
 8002478:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	430a      	orrs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4a64      	ldr	r2, [pc, #400]	; (8002630 <HAL_I2C_Init+0x25c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d802      	bhi.n	80024a8 <HAL_I2C_Init+0xd4>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3301      	adds	r3, #1
 80024a6:	e009      	b.n	80024bc <HAL_I2C_Init+0xe8>
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	4a63      	ldr	r2, [pc, #396]	; (8002640 <HAL_I2C_Init+0x26c>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	3301      	adds	r3, #1
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	430b      	orrs	r3, r1
 80024c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4956      	ldr	r1, [pc, #344]	; (8002630 <HAL_I2C_Init+0x25c>)
 80024d8:	428b      	cmp	r3, r1
 80024da:	d80d      	bhi.n	80024f8 <HAL_I2C_Init+0x124>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e59      	subs	r1, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ea:	3301      	adds	r3, #1
 80024ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	bf38      	it	cc
 80024f4:	2304      	movcc	r3, #4
 80024f6:	e04f      	b.n	8002598 <HAL_I2C_Init+0x1c4>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d111      	bne.n	8002524 <HAL_I2C_Init+0x150>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1e58      	subs	r0, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	440b      	add	r3, r1
 800250e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002512:	3301      	adds	r3, #1
 8002514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e012      	b.n	800254a <HAL_I2C_Init+0x176>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1e58      	subs	r0, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	0099      	lsls	r1, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	fbb0 f3f3 	udiv	r3, r0, r3
 800253a:	3301      	adds	r3, #1
 800253c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Init+0x17e>
 800254e:	2301      	movs	r3, #1
 8002550:	e022      	b.n	8002598 <HAL_I2C_Init+0x1c4>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10e      	bne.n	8002578 <HAL_I2C_Init+0x1a4>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1e58      	subs	r0, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6859      	ldr	r1, [r3, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	440b      	add	r3, r1
 8002568:	fbb0 f3f3 	udiv	r3, r0, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002576:	e00f      	b.n	8002598 <HAL_I2C_Init+0x1c4>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1e58      	subs	r0, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	0099      	lsls	r1, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	fbb0 f3f3 	udiv	r3, r0, r3
 800258e:	3301      	adds	r3, #1
 8002590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	6809      	ldr	r1, [r1, #0]
 800259c:	4313      	orrs	r3, r2
 800259e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6911      	ldr	r1, [r2, #16]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68d2      	ldr	r2, [r2, #12]
 80025d2:	4311      	orrs	r1, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	430b      	orrs	r3, r1
 80025da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	000186a0 	.word	0x000186a0
 8002634:	001e847f 	.word	0x001e847f
 8002638:	003d08ff 	.word	0x003d08ff
 800263c:	431bde83 	.word	0x431bde83
 8002640:	10624dd3 	.word	0x10624dd3

08002644 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	4608      	mov	r0, r1
 800264e:	4611      	mov	r1, r2
 8002650:	461a      	mov	r2, r3
 8002652:	4603      	mov	r3, r0
 8002654:	817b      	strh	r3, [r7, #10]
 8002656:	460b      	mov	r3, r1
 8002658:	813b      	strh	r3, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800265e:	f7fe ffc3 	bl	80015e8 <HAL_GetTick>
 8002662:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b20      	cmp	r3, #32
 800266e:	f040 80d9 	bne.w	8002824 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2319      	movs	r3, #25
 8002678:	2201      	movs	r2, #1
 800267a:	496d      	ldr	r1, [pc, #436]	; (8002830 <HAL_I2C_Mem_Write+0x1ec>)
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f001 ff90 	bl	80045a2 <I2C_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002688:	2302      	movs	r3, #2
 800268a:	e0cc      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_I2C_Mem_Write+0x56>
 8002696:	2302      	movs	r3, #2
 8002698:	e0c5      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d007      	beq.n	80026c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2221      	movs	r2, #33	; 0x21
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2240      	movs	r2, #64	; 0x40
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a3a      	ldr	r2, [r7, #32]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4a4d      	ldr	r2, [pc, #308]	; (8002834 <HAL_I2C_Mem_Write+0x1f0>)
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002702:	88f8      	ldrh	r0, [r7, #6]
 8002704:	893a      	ldrh	r2, [r7, #8]
 8002706:	8979      	ldrh	r1, [r7, #10]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	4603      	mov	r3, r0
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f001 fc3a 	bl	8003f8c <I2C_RequestMemoryWrite>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d052      	beq.n	80027c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e081      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f002 f811 	bl	800474e <I2C_WaitOnTXEFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b04      	cmp	r3, #4
 8002738:	d107      	bne.n	800274a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002748:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06b      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b04      	cmp	r3, #4
 800278a:	d11b      	bne.n	80027c4 <HAL_I2C_Mem_Write+0x180>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d017      	beq.n	80027c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	781a      	ldrb	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1aa      	bne.n	8002722 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f001 fffd 	bl	80047d0 <I2C_WaitOnBTFFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d107      	bne.n	80027f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e016      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e000      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	00100002 	.word	0x00100002
 8002834:	ffff0000 	.word	0xffff0000

08002838 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	; 0x30
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	4608      	mov	r0, r1
 8002842:	4611      	mov	r1, r2
 8002844:	461a      	mov	r2, r3
 8002846:	4603      	mov	r3, r0
 8002848:	817b      	strh	r3, [r7, #10]
 800284a:	460b      	mov	r3, r1
 800284c:	813b      	strh	r3, [r7, #8]
 800284e:	4613      	mov	r3, r2
 8002850:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002852:	f7fe fec9 	bl	80015e8 <HAL_GetTick>
 8002856:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b20      	cmp	r3, #32
 8002866:	f040 8123 	bne.w	8002ab0 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800286a:	4b94      	ldr	r3, [pc, #592]	; (8002abc <HAL_I2C_Mem_Read_DMA+0x284>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	08db      	lsrs	r3, r3, #3
 8002870:	4a93      	ldr	r2, [pc, #588]	; (8002ac0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0a1a      	lsrs	r2, r3, #8
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	009a      	lsls	r2, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	3b01      	subs	r3, #1
 8002888:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d116      	bne.n	80028be <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f043 0220 	orr.w	r2, r3, #32
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0f9      	b.n	8002ab2 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d0db      	beq.n	8002884 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Mem_Read_DMA+0xa2>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e0eb      	b.n	8002ab2 <HAL_I2C_Mem_Read_DMA+0x27a>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d007      	beq.n	8002900 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2222      	movs	r2, #34	; 0x22
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2240      	movs	r2, #64	; 0x40
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800292a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002930:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a61      	ldr	r2, [pc, #388]	; (8002ac4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8085 	beq.w	8002a56 <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	4a5d      	ldr	r2, [pc, #372]	; (8002ac8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8002952:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	4a5c      	ldr	r2, [pc, #368]	; (8002acc <HAL_I2C_Mem_Read_DMA+0x294>)
 800295a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	2200      	movs	r2, #0
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	2200      	movs	r2, #0
 800296a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	2200      	movs	r2, #0
 8002972:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	2200      	movs	r2, #0
 800297a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3310      	adds	r3, #16
 8002986:	4619      	mov	r1, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	461a      	mov	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	f7ff f825 	bl	80019e0 <HAL_DMA_Start_IT>
 8002996:	4603      	mov	r3, r0
 8002998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 800299c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d144      	bne.n	8002a2e <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80029a4:	88f8      	ldrh	r0, [r7, #6]
 80029a6:	893a      	ldrh	r2, [r7, #8]
 80029a8:	8979      	ldrh	r1, [r7, #10]
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	2323      	movs	r3, #35	; 0x23
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	4603      	mov	r3, r0
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f001 fb7d 	bl	80040b4 <I2C_RequestMemoryRead>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e076      	b.n	8002ab2 <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d108      	bne.n	80029de <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e007      	b.n	80029ee <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a1a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	e03e      	b.n	8002aac <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f043 0210 	orr.w	r2, r3, #16
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e02d      	b.n	8002ab2 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002a56:	88f8      	ldrh	r0, [r7, #6]
 8002a58:	893a      	ldrh	r2, [r7, #8]
 8002a5a:	8979      	ldrh	r1, [r7, #10]
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	2323      	movs	r3, #35	; 0x23
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	4603      	mov	r3, r0
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f001 fb24 	bl	80040b4 <I2C_RequestMemoryRead>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e01d      	b.n	8002ab2 <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9a:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3728      	adds	r7, #40	; 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	14f8b589 	.word	0x14f8b589
 8002ac4:	ffff0000 	.word	0xffff0000
 8002ac8:	08004281 	.word	0x08004281
 8002acc:	0800442b 	.word	0x0800442b

08002ad0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002af0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d003      	beq.n	8002b08 <HAL_I2C_EV_IRQHandler+0x38>
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	f040 80b6 	bne.w	8002c74 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <HAL_I2C_EV_IRQHandler+0x6e>
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002b28:	d003      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0x62>
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002b30:	d101      	bne.n	8002b36 <HAL_I2C_EV_IRQHandler+0x66>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_I2C_EV_IRQHandler+0x68>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f000 8127 	beq.w	8002d8c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00c      	beq.n	8002b62 <HAL_I2C_EV_IRQHandler+0x92>
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	0a5b      	lsrs	r3, r3, #9
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f001 feab 	bl	80048b0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fc75 	bl	800344a <I2C_Master_SB>
 8002b60:	e087      	b.n	8002c72 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	08db      	lsrs	r3, r3, #3
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_I2C_EV_IRQHandler+0xb2>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	0a5b      	lsrs	r3, r3, #9
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fceb 	bl	8003556 <I2C_Master_ADD10>
 8002b80:	e077      	b.n	8002c72 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	0a5b      	lsrs	r3, r3, #9
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fd05 	bl	80035aa <I2C_Master_ADDR>
 8002ba0:	e067      	b.n	8002c72 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	089b      	lsrs	r3, r3, #2
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d030      	beq.n	8002c10 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bbc:	f000 80e8 	beq.w	8002d90 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	09db      	lsrs	r3, r3, #7
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00f      	beq.n	8002bec <HAL_I2C_EV_IRQHandler+0x11c>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	0a9b      	lsrs	r3, r3, #10
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <HAL_I2C_EV_IRQHandler+0x11c>
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f941 	bl	8002e6c <I2C_MasterTransmit_TXE>
 8002bea:	e042      	b.n	8002c72 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80cb 	beq.w	8002d90 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	0a5b      	lsrs	r3, r3, #9
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80c4 	beq.w	8002d90 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f9cb 	bl	8002fa4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c0e:	e0bf      	b.n	8002d90 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c1e:	f000 80b7 	beq.w	8002d90 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00f      	beq.n	8002c4e <HAL_I2C_EV_IRQHandler+0x17e>
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	0a9b      	lsrs	r3, r3, #10
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_I2C_EV_IRQHandler+0x17e>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa93 	bl	8003172 <I2C_MasterReceive_RXNE>
 8002c4c:	e011      	b.n	8002c72 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	089b      	lsrs	r3, r3, #2
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 809a 	beq.w	8002d90 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	0a5b      	lsrs	r3, r3, #9
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8093 	beq.w	8002d90 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fb03 	bl	8003276 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c70:	e08e      	b.n	8002d90 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002c72:	e08d      	b.n	8002d90 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d004      	beq.n	8002c86 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	e007      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d012      	beq.n	8002cc8 <HAL_I2C_EV_IRQHandler+0x1f8>
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	0a5b      	lsrs	r3, r3, #9
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00c      	beq.n	8002cc8 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002cbe:	69b9      	ldr	r1, [r7, #24]
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fec1 	bl	8003a48 <I2C_Slave_ADDR>
 8002cc6:	e066      	b.n	8002d96 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x218>
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	0a5b      	lsrs	r3, r3, #9
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fef5 	bl	8003ad0 <I2C_Slave_STOPF>
 8002ce6:	e056      	b.n	8002d96 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ce8:	7bbb      	ldrb	r3, [r7, #14]
 8002cea:	2b21      	cmp	r3, #33	; 0x21
 8002cec:	d002      	beq.n	8002cf4 <HAL_I2C_EV_IRQHandler+0x224>
 8002cee:	7bbb      	ldrb	r3, [r7, #14]
 8002cf0:	2b29      	cmp	r3, #41	; 0x29
 8002cf2:	d125      	bne.n	8002d40 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	09db      	lsrs	r3, r3, #7
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00f      	beq.n	8002d20 <HAL_I2C_EV_IRQHandler+0x250>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d009      	beq.n	8002d20 <HAL_I2C_EV_IRQHandler+0x250>
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fdd7 	bl	80038cc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d1e:	e039      	b.n	8002d94 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d033      	beq.n	8002d94 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	0a5b      	lsrs	r3, r3, #9
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d02d      	beq.n	8002d94 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fe04 	bl	8003946 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d3e:	e029      	b.n	8002d94 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	099b      	lsrs	r3, r3, #6
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00f      	beq.n	8002d6c <HAL_I2C_EV_IRQHandler+0x29c>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	0a9b      	lsrs	r3, r3, #10
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d009      	beq.n	8002d6c <HAL_I2C_EV_IRQHandler+0x29c>
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fe0f 	bl	8003988 <I2C_SlaveReceive_RXNE>
 8002d6a:	e014      	b.n	8002d96 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00e      	beq.n	8002d96 <HAL_I2C_EV_IRQHandler+0x2c6>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	0a5b      	lsrs	r3, r3, #9
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fe3d 	bl	8003a04 <I2C_SlaveReceive_BTF>
 8002d8a:	e004      	b.n	8002d96 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002d8c:	bf00      	nop
 8002d8e:	e002      	b.n	8002d96 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d90:	bf00      	nop
 8002d92:	e000      	b.n	8002d96 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d94:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	70fb      	strb	r3, [r7, #3]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d150      	bne.n	8002f34 <I2C_MasterTransmit_TXE+0xc8>
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b21      	cmp	r3, #33	; 0x21
 8002e96:	d14d      	bne.n	8002f34 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d01d      	beq.n	8002eda <I2C_MasterTransmit_TXE+0x6e>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d01a      	beq.n	8002eda <I2C_MasterTransmit_TXE+0x6e>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eaa:	d016      	beq.n	8002eda <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2211      	movs	r2, #17
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ff62 	bl	8002d9c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ed8:	e060      	b.n	8002f9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ee8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d107      	bne.n	8002f24 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff7d 	bl	8002e1c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f22:	e03b      	b.n	8002f9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff35 	bl	8002d9c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f32:	e033      	b.n	8002f9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b21      	cmp	r3, #33	; 0x21
 8002f38:	d005      	beq.n	8002f46 <I2C_MasterTransmit_TXE+0xda>
 8002f3a:	7bbb      	ldrb	r3, [r7, #14]
 8002f3c:	2b40      	cmp	r3, #64	; 0x40
 8002f3e:	d12d      	bne.n	8002f9c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b22      	cmp	r3, #34	; 0x22
 8002f44:	d12a      	bne.n	8002f9c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d108      	bne.n	8002f62 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002f60:	e01c      	b.n	8002f9c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d103      	bne.n	8002f76 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f898 	bl	80030a4 <I2C_MemoryTransmit_TXE_BTF>
}
 8002f74:	e012      	b.n	8002f9c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f9a:	e7ff      	b.n	8002f9c <I2C_MasterTransmit_TXE+0x130>
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b21      	cmp	r3, #33	; 0x21
 8002fbc:	d165      	bne.n	800308a <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d012      	beq.n	8002fee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002fec:	e056      	b.n	800309c <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d01d      	beq.n	8003030 <I2C_MasterTransmit_BTF+0x8c>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d01a      	beq.n	8003030 <I2C_MasterTransmit_BTF+0x8c>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003000:	d016      	beq.n	8003030 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003010:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2211      	movs	r2, #17
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff feb7 	bl	8002d9c <HAL_I2C_MasterTxCpltCallback>
}
 800302e:	e035      	b.n	800309c <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800303e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d107      	bne.n	800307a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fed2 	bl	8002e1c <HAL_I2C_MemTxCpltCallback>
}
 8003078:	e010      	b.n	800309c <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff fe8a 	bl	8002d9c <HAL_I2C_MasterTxCpltCallback>
}
 8003088:	e008      	b.n	800309c <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d102      	bne.n	800309c <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f804 	bl	80030a4 <I2C_MemoryTransmit_TXE_BTF>
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d11d      	bne.n	80030f0 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10b      	bne.n	80030d4 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80030d2:	e048      	b.n	8003166 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d8:	b29b      	uxth	r3, r3
 80030da:	121b      	asrs	r3, r3, #8
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030ee:	e03a      	b.n	8003166 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10b      	bne.n	8003110 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800310e:	e02a      	b.n	8003166 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	2b02      	cmp	r3, #2
 8003116:	d126      	bne.n	8003166 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b22      	cmp	r3, #34	; 0x22
 8003122:	d108      	bne.n	8003136 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003132:	601a      	str	r2, [r3, #0]
}
 8003134:	e017      	b.n	8003166 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b21      	cmp	r3, #33	; 0x21
 8003140:	d111      	bne.n	8003166 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	781a      	ldrb	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b22      	cmp	r3, #34	; 0x22
 8003184:	d173      	bne.n	800326e <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d920      	bls.n	80031d6 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d154      	bne.n	800326e <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80031d4:	e04b      	b.n	800326e <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d047      	beq.n	800326e <I2C_MasterReceive_RXNE+0xfc>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d002      	beq.n	80031ea <I2C_MasterReceive_RXNE+0x78>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d141      	bne.n	800326e <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003208:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	d10a      	bne.n	800325a <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fdec 	bl	8002e30 <HAL_I2C_MemRxCpltCallback>
}
 8003258:	e009      	b.n	800326e <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2212      	movs	r2, #18
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff fda1 	bl	8002db0 <HAL_I2C_MasterRxCpltCallback>
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b04      	cmp	r3, #4
 800328c:	d11b      	bne.n	80032c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80032c4:	e0bd      	b.n	8003442 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d129      	bne.n	8003324 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d00a      	beq.n	80032fc <I2C_MasterReceive_BTF+0x86>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d007      	beq.n	80032fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003322:	e08e      	b.n	8003442 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d176      	bne.n	800341c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d002      	beq.n	800333a <I2C_MasterReceive_BTF+0xc4>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b10      	cmp	r3, #16
 8003338:	d108      	bne.n	800334c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e019      	b.n	8003380 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b04      	cmp	r3, #4
 8003350:	d002      	beq.n	8003358 <I2C_MasterReceive_BTF+0xe2>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d108      	bne.n	800336a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e00a      	b.n	8003380 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b10      	cmp	r3, #16
 800336e:	d007      	beq.n	8003380 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d10a      	bne.n	8003406 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fd16 	bl	8002e30 <HAL_I2C_MemRxCpltCallback>
}
 8003404:	e01d      	b.n	8003442 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2212      	movs	r2, #18
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff fccb 	bl	8002db0 <HAL_I2C_MasterRxCpltCallback>
}
 800341a:	e012      	b.n	8003442 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d117      	bne.n	800348e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003476:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003478:	e067      	b.n	800354a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]
}
 800348c:	e05d      	b.n	800354a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003496:	d133      	bne.n	8003500 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b21      	cmp	r3, #33	; 0x21
 80034a2:	d109      	bne.n	80034b8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034b4:	611a      	str	r2, [r3, #16]
 80034b6:	e008      	b.n	80034ca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <I2C_Master_SB+0x92>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d108      	bne.n	80034ee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d032      	beq.n	800354a <I2C_Master_SB+0x100>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d02d      	beq.n	800354a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fc:	605a      	str	r2, [r3, #4]
}
 80034fe:	e024      	b.n	800354a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10e      	bne.n	8003526 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	b29b      	uxth	r3, r3
 800350e:	11db      	asrs	r3, r3, #7
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f003 0306 	and.w	r3, r3, #6
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f063 030f 	orn	r3, r3, #15
 800351c:	b2da      	uxtb	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	611a      	str	r2, [r3, #16]
}
 8003524:	e011      	b.n	800354a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352a:	2b01      	cmp	r3, #1
 800352c:	d10d      	bne.n	800354a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	b29b      	uxth	r3, r3
 8003534:	11db      	asrs	r3, r3, #7
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f003 0306 	and.w	r3, r3, #6
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f063 030e 	orn	r3, r3, #14
 8003542:	b2da      	uxtb	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	611a      	str	r2, [r3, #16]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	b2da      	uxtb	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <I2C_Master_ADD10+0x24>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	2b00      	cmp	r3, #0
 8003578:	d011      	beq.n	800359e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d104      	bne.n	800358e <I2C_Master_ADD10+0x38>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d007      	beq.n	800359e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b091      	sub	sp, #68	; 0x44
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b22      	cmp	r3, #34	; 0x22
 80035d2:	f040 8169 	bne.w	80038a8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <I2C_Master_ADDR+0x54>
 80035de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d10b      	bne.n	80035fe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e6:	2300      	movs	r3, #0
 80035e8:	633b      	str	r3, [r7, #48]	; 0x30
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	633b      	str	r3, [r7, #48]	; 0x30
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	e160      	b.n	80038c0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11d      	bne.n	8003642 <I2C_Master_ADDR+0x98>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800360e:	d118      	bne.n	8003642 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003610:	2300      	movs	r3, #0
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003634:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	651a      	str	r2, [r3, #80]	; 0x50
 8003640:	e13e      	b.n	80038c0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d113      	bne.n	8003674 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364c:	2300      	movs	r3, #0
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e115      	b.n	80038a0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b01      	cmp	r3, #1
 800367c:	f040 808a 	bne.w	8003794 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003682:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003686:	d137      	bne.n	80036f8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003696:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a6:	d113      	bne.n	80036d0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b8:	2300      	movs	r3, #0
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	e0e7      	b.n	80038a0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d0:	2300      	movs	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e0d3      	b.n	80038a0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d02e      	beq.n	800375c <I2C_Master_ADDR+0x1b2>
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003700:	2b20      	cmp	r3, #32
 8003702:	d02b      	beq.n	800375c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003706:	2b12      	cmp	r3, #18
 8003708:	d102      	bne.n	8003710 <I2C_Master_ADDR+0x166>
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	2b01      	cmp	r3, #1
 800370e:	d125      	bne.n	800375c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	2b04      	cmp	r3, #4
 8003714:	d00e      	beq.n	8003734 <I2C_Master_ADDR+0x18a>
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	2b02      	cmp	r3, #2
 800371a:	d00b      	beq.n	8003734 <I2C_Master_ADDR+0x18a>
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	2b10      	cmp	r3, #16
 8003720:	d008      	beq.n	8003734 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e007      	b.n	8003744 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003742:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003744:	2300      	movs	r3, #0
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	e0a1      	b.n	80038a0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800376c:	2300      	movs	r3, #0
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e085      	b.n	80038a0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d14d      	bne.n	800383a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d016      	beq.n	80037d2 <I2C_Master_ADDR+0x228>
 80037a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d013      	beq.n	80037d2 <I2C_Master_ADDR+0x228>
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	2b10      	cmp	r3, #16
 80037ae:	d010      	beq.n	80037d2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037be:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e007      	b.n	80037e2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037e0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f0:	d117      	bne.n	8003822 <I2C_Master_ADDR+0x278>
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f8:	d00b      	beq.n	8003812 <I2C_Master_ADDR+0x268>
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d008      	beq.n	8003812 <I2C_Master_ADDR+0x268>
 8003800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003802:	2b08      	cmp	r3, #8
 8003804:	d005      	beq.n	8003812 <I2C_Master_ADDR+0x268>
 8003806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003808:	2b10      	cmp	r3, #16
 800380a:	d002      	beq.n	8003812 <I2C_Master_ADDR+0x268>
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	2b20      	cmp	r3, #32
 8003810:	d107      	bne.n	8003822 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003820:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	e032      	b.n	80038a0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003848:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003858:	d117      	bne.n	800388a <I2C_Master_ADDR+0x2e0>
 800385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003860:	d00b      	beq.n	800387a <I2C_Master_ADDR+0x2d0>
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	2b01      	cmp	r3, #1
 8003866:	d008      	beq.n	800387a <I2C_Master_ADDR+0x2d0>
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	2b08      	cmp	r3, #8
 800386c:	d005      	beq.n	800387a <I2C_Master_ADDR+0x2d0>
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	2b10      	cmp	r3, #16
 8003872:	d002      	beq.n	800387a <I2C_Master_ADDR+0x2d0>
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	2b20      	cmp	r3, #32
 8003878:	d107      	bne.n	800388a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003888:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038a6:	e00b      	b.n	80038c0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
}
 80038be:	e7ff      	b.n	80038c0 <I2C_Master_ADDR+0x316>
 80038c0:	bf00      	nop
 80038c2:	3744      	adds	r7, #68	; 0x44
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d02b      	beq.n	800393e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	781a      	ldrb	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d114      	bne.n	800393e <I2C_SlaveTransmit_TXE+0x72>
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b29      	cmp	r3, #41	; 0x29
 8003918:	d111      	bne.n	800393e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003928:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2221      	movs	r2, #33	; 0x21
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2228      	movs	r2, #40	; 0x28
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff fa43 	bl	8002dc4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800393e:	bf00      	nop
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d011      	beq.n	800397c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003996:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02c      	beq.n	80039fc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d114      	bne.n	80039fc <I2C_SlaveReceive_RXNE+0x74>
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	2b2a      	cmp	r3, #42	; 0x2a
 80039d6:	d111      	bne.n	80039fc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2222      	movs	r2, #34	; 0x22
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2228      	movs	r2, #40	; 0x28
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff f9ee 	bl	8002dd8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d012      	beq.n	8003a3c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a62:	2b28      	cmp	r3, #40	; 0x28
 8003a64:	d127      	bne.n	8003ab6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a74:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	09db      	lsrs	r3, r3, #7
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	81bb      	strh	r3, [r7, #12]
 8003a98:	e002      	b.n	8003aa0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003aa8:	89ba      	ldrh	r2, [r7, #12]
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	4619      	mov	r1, r3
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff f99c 	bl	8002dec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ab4:	e008      	b.n	8003ac8 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f06f 0202 	mvn.w	r2, #2
 8003abe:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003aee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2c:	d172      	bne.n	8003c14 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b22      	cmp	r3, #34	; 0x22
 8003b32:	d002      	beq.n	8003b3a <I2C_Slave_STOPF+0x6a>
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b2a      	cmp	r3, #42	; 0x2a
 8003b38:	d135      	bne.n	8003ba6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f043 0204 	orr.w	r2, r3, #4
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe f938 	bl	8001de8 <HAL_DMA_GetState>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d049      	beq.n	8003c12 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	4a69      	ldr	r2, [pc, #420]	; (8003d28 <I2C_Slave_STOPF+0x258>)
 8003b84:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd ff80 	bl	8001a90 <HAL_DMA_Abort_IT>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d03d      	beq.n	8003c12 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ba4:	e035      	b.n	8003c12 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f043 0204 	orr.w	r2, r3, #4
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe f902 	bl	8001de8 <HAL_DMA_GetState>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d014      	beq.n	8003c14 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	4a4e      	ldr	r2, [pc, #312]	; (8003d28 <I2C_Slave_STOPF+0x258>)
 8003bf0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd ff4a 	bl	8001a90 <HAL_DMA_Abort_IT>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4798      	blx	r3
 8003c10:	e000      	b.n	8003c14 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c12:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d03e      	beq.n	8003c9c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d112      	bne.n	8003c52 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d112      	bne.n	8003c86 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	f043 0204 	orr.w	r2, r3, #4
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f843 	bl	8003d30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003caa:	e039      	b.n	8003d20 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb0:	d109      	bne.n	8003cc6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2228      	movs	r2, #40	; 0x28
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff f889 	bl	8002dd8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b28      	cmp	r3, #40	; 0x28
 8003cd0:	d111      	bne.n	8003cf6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <I2C_Slave_STOPF+0x25c>)
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff f88a 	bl	8002e08 <HAL_I2C_ListenCpltCallback>
}
 8003cf4:	e014      	b.n	8003d20 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	2b22      	cmp	r3, #34	; 0x22
 8003cfc:	d002      	beq.n	8003d04 <I2C_Slave_STOPF+0x234>
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2b22      	cmp	r3, #34	; 0x22
 8003d02:	d10d      	bne.n	8003d20 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff f85c 	bl	8002dd8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	080044a5 	.word	0x080044a5
 8003d2c:	ffff0000 	.word	0xffff0000

08003d30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d10a      	bne.n	8003d62 <I2C_ITError+0x32>
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	2b22      	cmp	r3, #34	; 0x22
 8003d50:	d107      	bne.n	8003d62 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d60:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d68:	2b28      	cmp	r3, #40	; 0x28
 8003d6a:	d107      	bne.n	8003d7c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2228      	movs	r2, #40	; 0x28
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d7a:	e015      	b.n	8003da8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8a:	d006      	beq.n	8003d9a <I2C_ITError+0x6a>
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	2b60      	cmp	r3, #96	; 0x60
 8003d90:	d003      	beq.n	8003d9a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db6:	d162      	bne.n	8003e7e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d020      	beq.n	8003e18 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	4a6a      	ldr	r2, [pc, #424]	; (8003f84 <I2C_ITError+0x254>)
 8003ddc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd fe54 	bl	8001a90 <HAL_DMA_Abort_IT>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8089 	beq.w	8003f02 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e12:	4610      	mov	r0, r2
 8003e14:	4798      	blx	r3
 8003e16:	e074      	b.n	8003f02 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	4a59      	ldr	r2, [pc, #356]	; (8003f84 <I2C_ITError+0x254>)
 8003e1e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fd fe33 	bl	8001a90 <HAL_DMA_Abort_IT>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d068      	beq.n	8003f02 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d10b      	bne.n	8003e56 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0201 	bic.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4798      	blx	r3
 8003e7c:	e041      	b.n	8003f02 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b60      	cmp	r3, #96	; 0x60
 8003e88:	d125      	bne.n	8003ed6 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d10b      	bne.n	8003ebe <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fe ffc2 	bl	8002e58 <HAL_I2C_AbortCpltCallback>
 8003ed4:	e015      	b.n	8003f02 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d10b      	bne.n	8003efc <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7fe ffa1 	bl	8002e44 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10e      	bne.n	8003f30 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d104      	bne.n	8003f30 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f46:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d113      	bne.n	8003f7c <I2C_ITError+0x24c>
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b28      	cmp	r3, #40	; 0x28
 8003f58:	d110      	bne.n	8003f7c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <I2C_ITError+0x258>)
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fe ff46 	bl	8002e08 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	080044a5 	.word	0x080044a5
 8003f88:	ffff0000 	.word	0xffff0000

08003f8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	4608      	mov	r0, r1
 8003f96:	4611      	mov	r1, r2
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	817b      	strh	r3, [r7, #10]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	813b      	strh	r3, [r7, #8]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 faed 	bl	80045a2 <I2C_WaitOnFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00c      	beq.n	8003fe8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e05f      	b.n	80040a8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fe8:	897b      	ldrh	r3, [r7, #10]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ff6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	6a3a      	ldr	r2, [r7, #32]
 8003ffc:	492c      	ldr	r1, [pc, #176]	; (80040b0 <I2C_RequestMemoryWrite+0x124>)
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fb26 	bl	8004650 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e04c      	b.n	80040a8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004026:	6a39      	ldr	r1, [r7, #32]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fb90 	bl	800474e <I2C_WaitOnTXEFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	2b04      	cmp	r3, #4
 800403a:	d107      	bne.n	800404c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e02b      	b.n	80040a8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d105      	bne.n	8004062 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004056:	893b      	ldrh	r3, [r7, #8]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	611a      	str	r2, [r3, #16]
 8004060:	e021      	b.n	80040a6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004062:	893b      	ldrh	r3, [r7, #8]
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	b29b      	uxth	r3, r3
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004072:	6a39      	ldr	r1, [r7, #32]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fb6a 	bl	800474e <I2C_WaitOnTXEFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	2b04      	cmp	r3, #4
 8004086:	d107      	bne.n	8004098 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004096:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e005      	b.n	80040a8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800409c:	893b      	ldrh	r3, [r7, #8]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	00010002 	.word	0x00010002

080040b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	4608      	mov	r0, r1
 80040be:	4611      	mov	r1, r2
 80040c0:	461a      	mov	r2, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	817b      	strh	r3, [r7, #10]
 80040c6:	460b      	mov	r3, r1
 80040c8:	813b      	strh	r3, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fa51 	bl	80045a2 <I2C_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00c      	beq.n	8004120 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0a9      	b.n	8004274 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004120:	897b      	ldrh	r3, [r7, #10]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800412e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	6a3a      	ldr	r2, [r7, #32]
 8004134:	4951      	ldr	r1, [pc, #324]	; (800427c <I2C_RequestMemoryRead+0x1c8>)
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fa8a 	bl	8004650 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e096      	b.n	8004274 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800415c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415e:	6a39      	ldr	r1, [r7, #32]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 faf4 	bl	800474e <I2C_WaitOnTXEFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00d      	beq.n	8004188 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	2b04      	cmp	r3, #4
 8004172:	d107      	bne.n	8004184 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004182:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e075      	b.n	8004274 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d105      	bne.n	800419a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800418e:	893b      	ldrh	r3, [r7, #8]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	611a      	str	r2, [r3, #16]
 8004198:	e021      	b.n	80041de <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800419a:	893b      	ldrh	r3, [r7, #8]
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	b29b      	uxth	r3, r3
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041aa:	6a39      	ldr	r1, [r7, #32]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 face 	bl	800474e <I2C_WaitOnTXEFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00d      	beq.n	80041d4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d107      	bne.n	80041d0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e04f      	b.n	8004274 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041d4:	893b      	ldrh	r3, [r7, #8]
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e0:	6a39      	ldr	r1, [r7, #32]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fab3 	bl	800474e <I2C_WaitOnTXEFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00d      	beq.n	800420a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d107      	bne.n	8004206 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e034      	b.n	8004274 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004218:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	2200      	movs	r2, #0
 8004222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f9bb 	bl	80045a2 <I2C_WaitOnFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00c      	beq.n	800424c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e013      	b.n	8004274 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800424c:	897b      	ldrh	r3, [r7, #10]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	6a3a      	ldr	r2, [r7, #32]
 8004260:	4906      	ldr	r1, [pc, #24]	; (800427c <I2C_RequestMemoryRead+0x1c8>)
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f9f4 	bl	8004650 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	00010002 	.word	0x00010002

08004280 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004294:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800429c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042b2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	2200      	movs	r2, #0
 80042c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	2200      	movs	r2, #0
 80042d2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
 80042d6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80042da:	2b21      	cmp	r3, #33	; 0x21
 80042dc:	d007      	beq.n	80042ee <I2C_DMAXferCplt+0x6e>
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80042e4:	2b22      	cmp	r3, #34	; 0x22
 80042e6:	d131      	bne.n	800434c <I2C_DMAXferCplt+0xcc>
 80042e8:	7cbb      	ldrb	r3, [r7, #18]
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d12e      	bne.n	800434c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2200      	movs	r2, #0
 8004302:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b29      	cmp	r3, #41	; 0x29
 8004308:	d10a      	bne.n	8004320 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2221      	movs	r2, #33	; 0x21
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2228      	movs	r2, #40	; 0x28
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004318:	6978      	ldr	r0, [r7, #20]
 800431a:	f7fe fd53 	bl	8002dc4 <HAL_I2C_SlaveTxCpltCallback>
 800431e:	e00c      	b.n	800433a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	2b2a      	cmp	r3, #42	; 0x2a
 8004324:	d109      	bne.n	800433a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2222      	movs	r2, #34	; 0x22
 800432a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2228      	movs	r2, #40	; 0x28
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004334:	6978      	ldr	r0, [r7, #20]
 8004336:	f7fe fd4f 	bl	8002dd8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004348:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800434a:	e06a      	b.n	8004422 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d064      	beq.n	8004422 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d107      	bne.n	8004372 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004370:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004380:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004388:	d009      	beq.n	800439e <I2C_DMAXferCplt+0x11e>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d006      	beq.n	800439e <I2C_DMAXferCplt+0x11e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004396:	d002      	beq.n	800439e <I2C_DMAXferCplt+0x11e>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b20      	cmp	r3, #32
 800439c:	d107      	bne.n	80043ae <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043bc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043cc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80043dc:	6978      	ldr	r0, [r7, #20]
 80043de:	f7fe fd31 	bl	8002e44 <HAL_I2C_ErrorCallback>
}
 80043e2:	e01e      	b.n	8004422 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b40      	cmp	r3, #64	; 0x40
 80043f6:	d10a      	bne.n	800440e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004406:	6978      	ldr	r0, [r7, #20]
 8004408:	f7fe fd12 	bl	8002e30 <HAL_I2C_MemRxCpltCallback>
}
 800440c:	e009      	b.n	8004422 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2212      	movs	r2, #18
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800441c:	6978      	ldr	r0, [r7, #20]
 800441e:	f7fe fcc7 	bl	8002db0 <HAL_I2C_MasterRxCpltCallback>
}
 8004422:	bf00      	nop
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004444:	2200      	movs	r2, #0
 8004446:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	2200      	movs	r2, #0
 8004456:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fd fcd3 	bl	8001e04 <HAL_DMA_GetError>
 800445e:	4603      	mov	r3, r0
 8004460:	2b02      	cmp	r3, #2
 8004462:	d01b      	beq.n	800449c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004472:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f043 0210 	orr.w	r2, r3, #16
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7fe fcd4 	bl	8002e44 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c6:	2200      	movs	r2, #0
 80044c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	2200      	movs	r2, #0
 80044d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fc:	2200      	movs	r2, #0
 80044fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	2200      	movs	r2, #0
 800450e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b60      	cmp	r3, #96	; 0x60
 800452a:	d10e      	bne.n	800454a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7fe fc88 	bl	8002e58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004548:	e027      	b.n	800459a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800454a:	7afb      	ldrb	r3, [r7, #11]
 800454c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004550:	2b28      	cmp	r3, #40	; 0x28
 8004552:	d117      	bne.n	8004584 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004572:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2228      	movs	r2, #40	; 0x28
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004582:	e007      	b.n	8004594 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f7fe fc55 	bl	8002e44 <HAL_I2C_ErrorCallback>
}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b2:	e025      	b.n	8004600 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ba:	d021      	beq.n	8004600 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045bc:	f7fd f814 	bl	80015e8 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d302      	bcc.n	80045d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d116      	bne.n	8004600 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	f043 0220 	orr.w	r2, r3, #32
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e023      	b.n	8004648 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	0c1b      	lsrs	r3, r3, #16
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b01      	cmp	r3, #1
 8004608:	d10d      	bne.n	8004626 <I2C_WaitOnFlagUntilTimeout+0x84>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	43da      	mvns	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4013      	ands	r3, r2
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	e00c      	b.n	8004640 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	43da      	mvns	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4013      	ands	r3, r2
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf0c      	ite	eq
 8004638:	2301      	moveq	r3, #1
 800463a:	2300      	movne	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	429a      	cmp	r2, r3
 8004644:	d0b6      	beq.n	80045b4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800465e:	e051      	b.n	8004704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466e:	d123      	bne.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004688:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	f043 0204 	orr.w	r2, r3, #4
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e046      	b.n	8004746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046be:	d021      	beq.n	8004704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c0:	f7fc ff92 	bl	80015e8 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d302      	bcc.n	80046d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d116      	bne.n	8004704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e020      	b.n	8004746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	0c1b      	lsrs	r3, r3, #16
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	d10c      	bne.n	8004728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	43da      	mvns	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4013      	ands	r3, r2
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	e00b      	b.n	8004740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	43da      	mvns	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4013      	ands	r3, r2
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf14      	ite	ne
 800473a:	2301      	movne	r3, #1
 800473c:	2300      	moveq	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d18d      	bne.n	8004660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800475a:	e02d      	b.n	80047b8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f878 	bl	8004852 <I2C_IsAcknowledgeFailed>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e02d      	b.n	80047c8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004772:	d021      	beq.n	80047b8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004774:	f7fc ff38 	bl	80015e8 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	429a      	cmp	r2, r3
 8004782:	d302      	bcc.n	800478a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d116      	bne.n	80047b8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f043 0220 	orr.w	r2, r3, #32
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e007      	b.n	80047c8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b80      	cmp	r3, #128	; 0x80
 80047c4:	d1ca      	bne.n	800475c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047dc:	e02d      	b.n	800483a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f837 	bl	8004852 <I2C_IsAcknowledgeFailed>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e02d      	b.n	800484a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047f4:	d021      	beq.n	800483a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f6:	f7fc fef7 	bl	80015e8 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	429a      	cmp	r2, r3
 8004804:	d302      	bcc.n	800480c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d116      	bne.n	800483a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f043 0220 	orr.w	r2, r3, #32
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e007      	b.n	800484a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b04      	cmp	r3, #4
 8004846:	d1ca      	bne.n	80047de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004868:	d11b      	bne.n	80048a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004872:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f043 0204 	orr.w	r2, r3, #4
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80048c0:	d103      	bne.n	80048ca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80048c8:	e007      	b.n	80048da <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80048d2:	d102      	bne.n	80048da <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2208      	movs	r2, #8
 80048d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e25b      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d075      	beq.n	80049f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004906:	4ba3      	ldr	r3, [pc, #652]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	2b04      	cmp	r3, #4
 8004910:	d00c      	beq.n	800492c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004912:	4ba0      	ldr	r3, [pc, #640]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800491a:	2b08      	cmp	r3, #8
 800491c:	d112      	bne.n	8004944 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800491e:	4b9d      	ldr	r3, [pc, #628]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800492a:	d10b      	bne.n	8004944 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492c:	4b99      	ldr	r3, [pc, #612]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d05b      	beq.n	80049f0 <HAL_RCC_OscConfig+0x108>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d157      	bne.n	80049f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e236      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494c:	d106      	bne.n	800495c <HAL_RCC_OscConfig+0x74>
 800494e:	4b91      	ldr	r3, [pc, #580]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a90      	ldr	r2, [pc, #576]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e01d      	b.n	8004998 <HAL_RCC_OscConfig+0xb0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004964:	d10c      	bne.n	8004980 <HAL_RCC_OscConfig+0x98>
 8004966:	4b8b      	ldr	r3, [pc, #556]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a8a      	ldr	r2, [pc, #552]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 800496c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b88      	ldr	r3, [pc, #544]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a87      	ldr	r2, [pc, #540]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e00b      	b.n	8004998 <HAL_RCC_OscConfig+0xb0>
 8004980:	4b84      	ldr	r3, [pc, #528]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a83      	ldr	r2, [pc, #524]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	4b81      	ldr	r3, [pc, #516]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a80      	ldr	r2, [pc, #512]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d013      	beq.n	80049c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fc fe22 	bl	80015e8 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fc fe1e 	bl	80015e8 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e1fb      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	4b76      	ldr	r3, [pc, #472]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0xc0>
 80049c6:	e014      	b.n	80049f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7fc fe0e 	bl	80015e8 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fc fe0a 	bl	80015e8 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e1e7      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e2:	4b6c      	ldr	r3, [pc, #432]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0xe8>
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d063      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049fe:	4b65      	ldr	r3, [pc, #404]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a0a:	4b62      	ldr	r3, [pc, #392]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d11c      	bne.n	8004a50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a16:	4b5f      	ldr	r3, [pc, #380]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d116      	bne.n	8004a50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a22:	4b5c      	ldr	r3, [pc, #368]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_RCC_OscConfig+0x152>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d001      	beq.n	8004a3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e1bb      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3a:	4b56      	ldr	r3, [pc, #344]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4952      	ldr	r1, [pc, #328]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4e:	e03a      	b.n	8004ac6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d020      	beq.n	8004a9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a58:	4b4f      	ldr	r3, [pc, #316]	; (8004b98 <HAL_RCC_OscConfig+0x2b0>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7fc fdc3 	bl	80015e8 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a66:	f7fc fdbf 	bl	80015e8 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e19c      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a78:	4b46      	ldr	r3, [pc, #280]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a84:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	4940      	ldr	r1, [pc, #256]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	600b      	str	r3, [r1, #0]
 8004a98:	e015      	b.n	8004ac6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a9a:	4b3f      	ldr	r3, [pc, #252]	; (8004b98 <HAL_RCC_OscConfig+0x2b0>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fc fda2 	bl	80015e8 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa8:	f7fc fd9e 	bl	80015e8 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e17b      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aba:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d030      	beq.n	8004b34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d016      	beq.n	8004b08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ada:	4b30      	ldr	r3, [pc, #192]	; (8004b9c <HAL_RCC_OscConfig+0x2b4>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fc fd82 	bl	80015e8 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae8:	f7fc fd7e 	bl	80015e8 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e15b      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afa:	4b26      	ldr	r3, [pc, #152]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x200>
 8004b06:	e015      	b.n	8004b34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b08:	4b24      	ldr	r3, [pc, #144]	; (8004b9c <HAL_RCC_OscConfig+0x2b4>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0e:	f7fc fd6b 	bl	80015e8 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b16:	f7fc fd67 	bl	80015e8 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e144      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b28:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 80a0 	beq.w	8004c82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b42:	2300      	movs	r3, #0
 8004b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b46:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10f      	bne.n	8004b72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b52:	2300      	movs	r3, #0
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	4a0e      	ldr	r2, [pc, #56]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b60:	6413      	str	r3, [r2, #64]	; 0x40
 8004b62:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <HAL_RCC_OscConfig+0x2b8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d121      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <HAL_RCC_OscConfig+0x2b8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <HAL_RCC_OscConfig+0x2b8>)
 8004b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b8a:	f7fc fd2d 	bl	80015e8 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b90:	e011      	b.n	8004bb6 <HAL_RCC_OscConfig+0x2ce>
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800
 8004b98:	42470000 	.word	0x42470000
 8004b9c:	42470e80 	.word	0x42470e80
 8004ba0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba4:	f7fc fd20 	bl	80015e8 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e0fd      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb6:	4b81      	ldr	r3, [pc, #516]	; (8004dbc <HAL_RCC_OscConfig+0x4d4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d106      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x2f0>
 8004bca:	4b7d      	ldr	r3, [pc, #500]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	4a7c      	ldr	r2, [pc, #496]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd6:	e01c      	b.n	8004c12 <HAL_RCC_OscConfig+0x32a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	d10c      	bne.n	8004bfa <HAL_RCC_OscConfig+0x312>
 8004be0:	4b77      	ldr	r3, [pc, #476]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	4a76      	ldr	r2, [pc, #472]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004be6:	f043 0304 	orr.w	r3, r3, #4
 8004bea:	6713      	str	r3, [r2, #112]	; 0x70
 8004bec:	4b74      	ldr	r3, [pc, #464]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	4a73      	ldr	r2, [pc, #460]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf8:	e00b      	b.n	8004c12 <HAL_RCC_OscConfig+0x32a>
 8004bfa:	4b71      	ldr	r3, [pc, #452]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	4a70      	ldr	r2, [pc, #448]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	6713      	str	r3, [r2, #112]	; 0x70
 8004c06:	4b6e      	ldr	r3, [pc, #440]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	4a6d      	ldr	r2, [pc, #436]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004c0c:	f023 0304 	bic.w	r3, r3, #4
 8004c10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d015      	beq.n	8004c46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1a:	f7fc fce5 	bl	80015e8 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c20:	e00a      	b.n	8004c38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c22:	f7fc fce1 	bl	80015e8 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e0bc      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c38:	4b61      	ldr	r3, [pc, #388]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0ee      	beq.n	8004c22 <HAL_RCC_OscConfig+0x33a>
 8004c44:	e014      	b.n	8004c70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c46:	f7fc fccf 	bl	80015e8 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c4c:	e00a      	b.n	8004c64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c4e:	f7fc fccb 	bl	80015e8 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e0a6      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c64:	4b56      	ldr	r3, [pc, #344]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1ee      	bne.n	8004c4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d105      	bne.n	8004c82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c76:	4b52      	ldr	r3, [pc, #328]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	4a51      	ldr	r2, [pc, #324]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 8092 	beq.w	8004db0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c8c:	4b4c      	ldr	r3, [pc, #304]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 030c 	and.w	r3, r3, #12
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d05c      	beq.n	8004d52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d141      	bne.n	8004d24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca0:	4b48      	ldr	r3, [pc, #288]	; (8004dc4 <HAL_RCC_OscConfig+0x4dc>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fc fc9f 	bl	80015e8 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cae:	f7fc fc9b 	bl	80015e8 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e078      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc0:	4b3f      	ldr	r3, [pc, #252]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	019b      	lsls	r3, r3, #6
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	041b      	lsls	r3, r3, #16
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	061b      	lsls	r3, r3, #24
 8004cf0:	4933      	ldr	r1, [pc, #204]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf6:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <HAL_RCC_OscConfig+0x4dc>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fc fc74 	bl	80015e8 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d04:	f7fc fc70 	bl	80015e8 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e04d      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d16:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0x41c>
 8004d22:	e045      	b.n	8004db0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d24:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <HAL_RCC_OscConfig+0x4dc>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2a:	f7fc fc5d 	bl	80015e8 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d32:	f7fc fc59 	bl	80015e8 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e036      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d44:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCC_OscConfig+0x44a>
 8004d50:	e02e      	b.n	8004db0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e029      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d5e:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <HAL_RCC_OscConfig+0x4d8>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d11c      	bne.n	8004dac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d115      	bne.n	8004dac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d86:	4013      	ands	r3, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10d      	bne.n	8004dac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d106      	bne.n	8004dac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40007000 	.word	0x40007000
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	42470060 	.word	0x42470060

08004dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0cc      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ddc:	4b68      	ldr	r3, [pc, #416]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d90c      	bls.n	8004e04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dea:	4b65      	ldr	r3, [pc, #404]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b63      	ldr	r3, [pc, #396]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0b8      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d020      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e1c:	4b59      	ldr	r3, [pc, #356]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4a58      	ldr	r2, [pc, #352]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e34:	4b53      	ldr	r3, [pc, #332]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	4a52      	ldr	r2, [pc, #328]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e40:	4b50      	ldr	r3, [pc, #320]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	494d      	ldr	r1, [pc, #308]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d044      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d107      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e66:	4b47      	ldr	r3, [pc, #284]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d119      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e07f      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d003      	beq.n	8004e86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d107      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e86:	4b3f      	ldr	r3, [pc, #252]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e06f      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e96:	4b3b      	ldr	r3, [pc, #236]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e067      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ea6:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f023 0203 	bic.w	r2, r3, #3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	4934      	ldr	r1, [pc, #208]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eb8:	f7fc fb96 	bl	80015e8 <HAL_GetTick>
 8004ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec0:	f7fc fb92 	bl	80015e8 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e04f      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed6:	4b2b      	ldr	r3, [pc, #172]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 020c 	and.w	r2, r3, #12
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d1eb      	bne.n	8004ec0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d20c      	bcs.n	8004f10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef6:	4b22      	ldr	r3, [pc, #136]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b20      	ldr	r3, [pc, #128]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e032      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d008      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	4916      	ldr	r1, [pc, #88]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f3a:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	490e      	ldr	r1, [pc, #56]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f4e:	f000 f889 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 8004f52:	4601      	mov	r1, r0
 8004f54:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	091b      	lsrs	r3, r3, #4
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <HAL_RCC_ClockConfig+0x1c0>)
 8004f60:	5cd3      	ldrb	r3, [r2, r3]
 8004f62:	fa21 f303 	lsr.w	r3, r1, r3
 8004f66:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <HAL_RCC_ClockConfig+0x1c4>)
 8004f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fc faf6 	bl	8001560 <HAL_InitTick>

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40023c00 	.word	0x40023c00
 8004f84:	40023800 	.word	0x40023800
 8004f88:	08007448 	.word	0x08007448
 8004f8c:	20000000 	.word	0x20000000
 8004f90:	20000004 	.word	0x20000004

08004f94 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08c      	sub	sp, #48	; 0x30
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d129      	bne.n	8004ffa <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	4b2b      	ldr	r3, [pc, #172]	; (8005058 <HAL_RCC_MCOConfig+0xc4>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	4a2a      	ldr	r2, [pc, #168]	; (8005058 <HAL_RCC_MCOConfig+0xc4>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb6:	4b28      	ldr	r3, [pc, #160]	; (8005058 <HAL_RCC_MCOConfig+0xc4>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	61bb      	str	r3, [r7, #24]
 8004fc0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004fd8:	f107 031c 	add.w	r3, r7, #28
 8004fdc:	4619      	mov	r1, r3
 8004fde:	481f      	ldr	r0, [pc, #124]	; (800505c <HAL_RCC_MCOConfig+0xc8>)
 8004fe0:	f7fc fffa 	bl	8001fd8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004fe4:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <HAL_RCC_MCOConfig+0xc4>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	4919      	ldr	r1, [pc, #100]	; (8005058 <HAL_RCC_MCOConfig+0xc4>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004ff8:	e029      	b.n	800504e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	4b16      	ldr	r3, [pc, #88]	; (8005058 <HAL_RCC_MCOConfig+0xc4>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	4a15      	ldr	r2, [pc, #84]	; (8005058 <HAL_RCC_MCOConfig+0xc4>)
 8005004:	f043 0304 	orr.w	r3, r3, #4
 8005008:	6313      	str	r3, [r2, #48]	; 0x30
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <HAL_RCC_MCOConfig+0xc4>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800501a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501c:	2302      	movs	r3, #2
 800501e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005020:	2303      	movs	r3, #3
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005024:	2300      	movs	r3, #0
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005028:	2300      	movs	r3, #0
 800502a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800502c:	f107 031c 	add.w	r3, r7, #28
 8005030:	4619      	mov	r1, r3
 8005032:	480b      	ldr	r0, [pc, #44]	; (8005060 <HAL_RCC_MCOConfig+0xcc>)
 8005034:	f7fc ffd0 	bl	8001fd8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <HAL_RCC_MCOConfig+0xc4>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	00d9      	lsls	r1, r3, #3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	430b      	orrs	r3, r1
 8005048:	4903      	ldr	r1, [pc, #12]	; (8005058 <HAL_RCC_MCOConfig+0xc4>)
 800504a:	4313      	orrs	r3, r2
 800504c:	608b      	str	r3, [r1, #8]
}
 800504e:	bf00      	nop
 8005050:	3730      	adds	r7, #48	; 0x30
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800
 800505c:	40020000 	.word	0x40020000
 8005060:	40020800 	.word	0x40020800

08005064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	2300      	movs	r3, #0
 8005074:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800507a:	4b63      	ldr	r3, [pc, #396]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	2b04      	cmp	r3, #4
 8005084:	d007      	beq.n	8005096 <HAL_RCC_GetSysClockFreq+0x32>
 8005086:	2b08      	cmp	r3, #8
 8005088:	d008      	beq.n	800509c <HAL_RCC_GetSysClockFreq+0x38>
 800508a:	2b00      	cmp	r3, #0
 800508c:	f040 80b4 	bne.w	80051f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005090:	4b5e      	ldr	r3, [pc, #376]	; (800520c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005092:	60bb      	str	r3, [r7, #8]
       break;
 8005094:	e0b3      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005096:	4b5e      	ldr	r3, [pc, #376]	; (8005210 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005098:	60bb      	str	r3, [r7, #8]
      break;
 800509a:	e0b0      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800509c:	4b5a      	ldr	r3, [pc, #360]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050a6:	4b58      	ldr	r3, [pc, #352]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d04a      	beq.n	8005148 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050b2:	4b55      	ldr	r3, [pc, #340]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	099b      	lsrs	r3, r3, #6
 80050b8:	f04f 0400 	mov.w	r4, #0
 80050bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	ea03 0501 	and.w	r5, r3, r1
 80050c8:	ea04 0602 	and.w	r6, r4, r2
 80050cc:	4629      	mov	r1, r5
 80050ce:	4632      	mov	r2, r6
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	f04f 0400 	mov.w	r4, #0
 80050d8:	0154      	lsls	r4, r2, #5
 80050da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050de:	014b      	lsls	r3, r1, #5
 80050e0:	4619      	mov	r1, r3
 80050e2:	4622      	mov	r2, r4
 80050e4:	1b49      	subs	r1, r1, r5
 80050e6:	eb62 0206 	sbc.w	r2, r2, r6
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	f04f 0400 	mov.w	r4, #0
 80050f2:	0194      	lsls	r4, r2, #6
 80050f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050f8:	018b      	lsls	r3, r1, #6
 80050fa:	1a5b      	subs	r3, r3, r1
 80050fc:	eb64 0402 	sbc.w	r4, r4, r2
 8005100:	f04f 0100 	mov.w	r1, #0
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	00e2      	lsls	r2, r4, #3
 800510a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800510e:	00d9      	lsls	r1, r3, #3
 8005110:	460b      	mov	r3, r1
 8005112:	4614      	mov	r4, r2
 8005114:	195b      	adds	r3, r3, r5
 8005116:	eb44 0406 	adc.w	r4, r4, r6
 800511a:	f04f 0100 	mov.w	r1, #0
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	0262      	lsls	r2, r4, #9
 8005124:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005128:	0259      	lsls	r1, r3, #9
 800512a:	460b      	mov	r3, r1
 800512c:	4614      	mov	r4, r2
 800512e:	4618      	mov	r0, r3
 8005130:	4621      	mov	r1, r4
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f04f 0400 	mov.w	r4, #0
 8005138:	461a      	mov	r2, r3
 800513a:	4623      	mov	r3, r4
 800513c:	f7fb f898 	bl	8000270 <__aeabi_uldivmod>
 8005140:	4603      	mov	r3, r0
 8005142:	460c      	mov	r4, r1
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	e049      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005148:	4b2f      	ldr	r3, [pc, #188]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	099b      	lsrs	r3, r3, #6
 800514e:	f04f 0400 	mov.w	r4, #0
 8005152:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	ea03 0501 	and.w	r5, r3, r1
 800515e:	ea04 0602 	and.w	r6, r4, r2
 8005162:	4629      	mov	r1, r5
 8005164:	4632      	mov	r2, r6
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	f04f 0400 	mov.w	r4, #0
 800516e:	0154      	lsls	r4, r2, #5
 8005170:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005174:	014b      	lsls	r3, r1, #5
 8005176:	4619      	mov	r1, r3
 8005178:	4622      	mov	r2, r4
 800517a:	1b49      	subs	r1, r1, r5
 800517c:	eb62 0206 	sbc.w	r2, r2, r6
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	f04f 0400 	mov.w	r4, #0
 8005188:	0194      	lsls	r4, r2, #6
 800518a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800518e:	018b      	lsls	r3, r1, #6
 8005190:	1a5b      	subs	r3, r3, r1
 8005192:	eb64 0402 	sbc.w	r4, r4, r2
 8005196:	f04f 0100 	mov.w	r1, #0
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	00e2      	lsls	r2, r4, #3
 80051a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051a4:	00d9      	lsls	r1, r3, #3
 80051a6:	460b      	mov	r3, r1
 80051a8:	4614      	mov	r4, r2
 80051aa:	195b      	adds	r3, r3, r5
 80051ac:	eb44 0406 	adc.w	r4, r4, r6
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	02a2      	lsls	r2, r4, #10
 80051ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051be:	0299      	lsls	r1, r3, #10
 80051c0:	460b      	mov	r3, r1
 80051c2:	4614      	mov	r4, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	4621      	mov	r1, r4
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f04f 0400 	mov.w	r4, #0
 80051ce:	461a      	mov	r2, r3
 80051d0:	4623      	mov	r3, r4
 80051d2:	f7fb f84d 	bl	8000270 <__aeabi_uldivmod>
 80051d6:	4603      	mov	r3, r0
 80051d8:	460c      	mov	r4, r1
 80051da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051dc:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	3301      	adds	r3, #1
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f4:	60bb      	str	r3, [r7, #8]
      break;
 80051f6:	e002      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051fa:	60bb      	str	r3, [r7, #8]
      break;
 80051fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051fe:	68bb      	ldr	r3, [r7, #8]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005208:	40023800 	.word	0x40023800
 800520c:	00f42400 	.word	0x00f42400
 8005210:	007a1200 	.word	0x007a1200

08005214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005218:	4b03      	ldr	r3, [pc, #12]	; (8005228 <HAL_RCC_GetHCLKFreq+0x14>)
 800521a:	681b      	ldr	r3, [r3, #0]
}
 800521c:	4618      	mov	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	20000000 	.word	0x20000000

0800522c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005230:	f7ff fff0 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 8005234:	4601      	mov	r1, r0
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	0a9b      	lsrs	r3, r3, #10
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	4a03      	ldr	r2, [pc, #12]	; (8005250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005242:	5cd3      	ldrb	r3, [r2, r3]
 8005244:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005248:	4618      	mov	r0, r3
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40023800 	.word	0x40023800
 8005250:	08007458 	.word	0x08007458

08005254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005258:	f7ff ffdc 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 800525c:	4601      	mov	r1, r0
 800525e:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	0b5b      	lsrs	r3, r3, #13
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	4a03      	ldr	r2, [pc, #12]	; (8005278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800526a:	5cd3      	ldrb	r3, [r2, r3]
 800526c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40023800 	.word	0x40023800
 8005278:	08007458 	.word	0x08007458

0800527c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d035      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052a4:	4b62      	ldr	r3, [pc, #392]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052aa:	f7fc f99d 	bl	80015e8 <HAL_GetTick>
 80052ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052b0:	e008      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052b2:	f7fc f999 	bl	80015e8 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e0b0      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052c4:	4b5b      	ldr	r3, [pc, #364]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f0      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	019a      	lsls	r2, r3, #6
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	071b      	lsls	r3, r3, #28
 80052dc:	4955      	ldr	r1, [pc, #340]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052e4:	4b52      	ldr	r3, [pc, #328]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052ea:	f7fc f97d 	bl	80015e8 <HAL_GetTick>
 80052ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052f2:	f7fc f979 	bl	80015e8 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e090      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005304:	4b4b      	ldr	r3, [pc, #300]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8083 	beq.w	8005424 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	4b44      	ldr	r3, [pc, #272]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	4a43      	ldr	r2, [pc, #268]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532c:	6413      	str	r3, [r2, #64]	; 0x40
 800532e:	4b41      	ldr	r3, [pc, #260]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800533a:	4b3f      	ldr	r3, [pc, #252]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a3e      	ldr	r2, [pc, #248]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005344:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005346:	f7fc f94f 	bl	80015e8 <HAL_GetTick>
 800534a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800534c:	e008      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800534e:	f7fc f94b 	bl	80015e8 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e062      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005360:	4b35      	ldr	r3, [pc, #212]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0f0      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800536c:	4b31      	ldr	r3, [pc, #196]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005374:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d02f      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	429a      	cmp	r2, r3
 8005388:	d028      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800538a:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005392:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005394:	4b29      	ldr	r3, [pc, #164]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800539a:	4b28      	ldr	r3, [pc, #160]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053a0:	4a24      	ldr	r2, [pc, #144]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053a6:	4b23      	ldr	r3, [pc, #140]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d114      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053b2:	f7fc f919 	bl	80015e8 <HAL_GetTick>
 80053b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b8:	e00a      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ba:	f7fc f915 	bl	80015e8 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e02a      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d0:	4b18      	ldr	r3, [pc, #96]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ee      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e8:	d10d      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fe:	490d      	ldr	r1, [pc, #52]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005400:	4313      	orrs	r3, r2
 8005402:	608b      	str	r3, [r1, #8]
 8005404:	e005      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800540c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005410:	6093      	str	r3, [r2, #8]
 8005412:	4b08      	ldr	r3, [pc, #32]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005414:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541e:	4905      	ldr	r1, [pc, #20]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005420:	4313      	orrs	r3, r2
 8005422:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	42470068 	.word	0x42470068
 8005434:	40023800 	.word	0x40023800
 8005438:	40007000 	.word	0x40007000
 800543c:	42470e40 	.word	0x42470e40

08005440 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e083      	b.n	800555a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	7f5b      	ldrb	r3, [r3, #29]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d105      	bne.n	8005468 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fb febe 	bl	80011e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	22ca      	movs	r2, #202	; 0xca
 8005474:	625a      	str	r2, [r3, #36]	; 0x24
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2253      	movs	r2, #83	; 0x53
 800547c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f944 	bl	800570c <RTC_EnterInitMode>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d008      	beq.n	800549c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	22ff      	movs	r2, #255	; 0xff
 8005490:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2204      	movs	r2, #4
 8005496:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e05e      	b.n	800555a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6899      	ldr	r1, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68d2      	ldr	r2, [r2, #12]
 80054d6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6919      	ldr	r1, [r3, #16]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	041a      	lsls	r2, r3, #16
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054fa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10e      	bne.n	8005528 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8d6 	bl	80056bc <HAL_RTC_WaitForSynchro>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d008      	beq.n	8005528 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	22ff      	movs	r2, #255	; 0xff
 800551c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2204      	movs	r2, #4
 8005522:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e018      	b.n	800555a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005536:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	22ff      	movs	r2, #255	; 0xff
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005558:	2300      	movs	r3, #0
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005594:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005598:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	0c1b      	lsrs	r3, r3, #16
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d11a      	bne.n	8005614 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 f8be 	bl	8005764 <RTC_Bcd2ToByte>
 80055e8:	4603      	mov	r3, r0
 80055ea:	461a      	mov	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 f8b5 	bl	8005764 <RTC_Bcd2ToByte>
 80055fa:	4603      	mov	r3, r0
 80055fc:	461a      	mov	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	789b      	ldrb	r3, [r3, #2]
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f8ac 	bl	8005764 <RTC_Bcd2ToByte>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b086      	sub	sp, #24
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005638:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800563c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	0c1b      	lsrs	r3, r3, #16
 8005642:	b2da      	uxtb	r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	0a1b      	lsrs	r3, r3, #8
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	b2da      	uxtb	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005660:	b2da      	uxtb	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	0b5b      	lsrs	r3, r3, #13
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	b2da      	uxtb	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d11a      	bne.n	80056b2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	78db      	ldrb	r3, [r3, #3]
 8005680:	4618      	mov	r0, r3
 8005682:	f000 f86f 	bl	8005764 <RTC_Bcd2ToByte>
 8005686:	4603      	mov	r3, r0
 8005688:	461a      	mov	r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	785b      	ldrb	r3, [r3, #1]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 f866 	bl	8005764 <RTC_Bcd2ToByte>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	789b      	ldrb	r3, [r3, #2]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 f85d 	bl	8005764 <RTC_Bcd2ToByte>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056d6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056d8:	f7fb ff86 	bl	80015e8 <HAL_GetTick>
 80056dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80056de:	e009      	b.n	80056f4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80056e0:	f7fb ff82 	bl	80015e8 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ee:	d901      	bls.n	80056f4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e007      	b.n	8005704 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0ee      	beq.n	80056e0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d119      	bne.n	800575a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800572e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005730:	f7fb ff5a 	bl	80015e8 <HAL_GetTick>
 8005734:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005736:	e009      	b.n	800574c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005738:	f7fb ff56 	bl	80015e8 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005746:	d901      	bls.n	800574c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e007      	b.n	800575c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0ee      	beq.n	8005738 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	b2db      	uxtb	r3, r3
 8005778:	461a      	mov	r2, r3
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	b2da      	uxtb	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	4413      	add	r3, r2
 8005792:	b2db      	uxtb	r3, r3
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e01d      	b.n	80057ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fb fd22 	bl	8001210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3304      	adds	r3, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f000 f8e4 	bl	80059ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b06      	cmp	r3, #6
 8005816:	d007      	beq.n	8005828 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_TIM_ConfigClockSource+0x18>
 8005852:	2302      	movs	r3, #2
 8005854:	e0a6      	b.n	80059a4 <HAL_TIM_ConfigClockSource+0x166>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005874:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800587c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d067      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x120>
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	d80b      	bhi.n	80058aa <HAL_TIM_ConfigClockSource+0x6c>
 8005892:	2b10      	cmp	r3, #16
 8005894:	d073      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x140>
 8005896:	2b10      	cmp	r3, #16
 8005898:	d802      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x62>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d06f      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800589e:	e078      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d06c      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x140>
 80058a4:	2b30      	cmp	r3, #48	; 0x30
 80058a6:	d06a      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80058a8:	e073      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058aa:	2b70      	cmp	r3, #112	; 0x70
 80058ac:	d00d      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0x8c>
 80058ae:	2b70      	cmp	r3, #112	; 0x70
 80058b0:	d804      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x7e>
 80058b2:	2b50      	cmp	r3, #80	; 0x50
 80058b4:	d033      	beq.n	800591e <HAL_TIM_ConfigClockSource+0xe0>
 80058b6:	2b60      	cmp	r3, #96	; 0x60
 80058b8:	d041      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80058ba:	e06a      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c0:	d066      	beq.n	8005990 <HAL_TIM_ConfigClockSource+0x152>
 80058c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c6:	d017      	beq.n	80058f8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80058c8:	e063      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6899      	ldr	r1, [r3, #8]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f000 f981 	bl	8005be0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	609a      	str	r2, [r3, #8]
      break;
 80058f6:	e04c      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6899      	ldr	r1, [r3, #8]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f000 f96a 	bl	8005be0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800591a:	609a      	str	r2, [r3, #8]
      break;
 800591c:	e039      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	461a      	mov	r2, r3
 800592c:	f000 f8de 	bl	8005aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2150      	movs	r1, #80	; 0x50
 8005936:	4618      	mov	r0, r3
 8005938:	f000 f937 	bl	8005baa <TIM_ITRx_SetConfig>
      break;
 800593c:	e029      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	461a      	mov	r2, r3
 800594c:	f000 f8fd 	bl	8005b4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2160      	movs	r1, #96	; 0x60
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f927 	bl	8005baa <TIM_ITRx_SetConfig>
      break;
 800595c:	e019      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	461a      	mov	r2, r3
 800596c:	f000 f8be 	bl	8005aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2140      	movs	r1, #64	; 0x40
 8005976:	4618      	mov	r0, r3
 8005978:	f000 f917 	bl	8005baa <TIM_ITRx_SetConfig>
      break;
 800597c:	e009      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f000 f90e 	bl	8005baa <TIM_ITRx_SetConfig>
      break;
 800598e:	e000      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005990:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a40      	ldr	r2, [pc, #256]	; (8005ac0 <TIM_Base_SetConfig+0x114>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d013      	beq.n	80059ec <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ca:	d00f      	beq.n	80059ec <TIM_Base_SetConfig+0x40>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3d      	ldr	r2, [pc, #244]	; (8005ac4 <TIM_Base_SetConfig+0x118>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00b      	beq.n	80059ec <TIM_Base_SetConfig+0x40>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a3c      	ldr	r2, [pc, #240]	; (8005ac8 <TIM_Base_SetConfig+0x11c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d007      	beq.n	80059ec <TIM_Base_SetConfig+0x40>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a3b      	ldr	r2, [pc, #236]	; (8005acc <TIM_Base_SetConfig+0x120>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_Base_SetConfig+0x40>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a3a      	ldr	r2, [pc, #232]	; (8005ad0 <TIM_Base_SetConfig+0x124>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d108      	bne.n	80059fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2f      	ldr	r2, [pc, #188]	; (8005ac0 <TIM_Base_SetConfig+0x114>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d02b      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0c:	d027      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2c      	ldr	r2, [pc, #176]	; (8005ac4 <TIM_Base_SetConfig+0x118>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d023      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2b      	ldr	r2, [pc, #172]	; (8005ac8 <TIM_Base_SetConfig+0x11c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01f      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2a      	ldr	r2, [pc, #168]	; (8005acc <TIM_Base_SetConfig+0x120>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01b      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a29      	ldr	r2, [pc, #164]	; (8005ad0 <TIM_Base_SetConfig+0x124>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d017      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a28      	ldr	r2, [pc, #160]	; (8005ad4 <TIM_Base_SetConfig+0x128>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a27      	ldr	r2, [pc, #156]	; (8005ad8 <TIM_Base_SetConfig+0x12c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a26      	ldr	r2, [pc, #152]	; (8005adc <TIM_Base_SetConfig+0x130>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a25      	ldr	r2, [pc, #148]	; (8005ae0 <TIM_Base_SetConfig+0x134>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a24      	ldr	r2, [pc, #144]	; (8005ae4 <TIM_Base_SetConfig+0x138>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a23      	ldr	r2, [pc, #140]	; (8005ae8 <TIM_Base_SetConfig+0x13c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d108      	bne.n	8005a70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <TIM_Base_SetConfig+0x114>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_Base_SetConfig+0xf8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a0c      	ldr	r2, [pc, #48]	; (8005ad0 <TIM_Base_SetConfig+0x124>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d103      	bne.n	8005aac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	615a      	str	r2, [r3, #20]
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40010000 	.word	0x40010000
 8005ac4:	40000400 	.word	0x40000400
 8005ac8:	40000800 	.word	0x40000800
 8005acc:	40000c00 	.word	0x40000c00
 8005ad0:	40010400 	.word	0x40010400
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	40014400 	.word	0x40014400
 8005adc:	40014800 	.word	0x40014800
 8005ae0:	40001800 	.word	0x40001800
 8005ae4:	40001c00 	.word	0x40001c00
 8005ae8:	40002000 	.word	0x40002000

08005aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f023 0201 	bic.w	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f023 030a 	bic.w	r3, r3, #10
 8005b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	621a      	str	r2, [r3, #32]
}
 8005b3e:	bf00      	nop
 8005b40:	371c      	adds	r7, #28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b087      	sub	sp, #28
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f023 0210 	bic.w	r2, r3, #16
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	031b      	lsls	r3, r3, #12
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b085      	sub	sp, #20
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f043 0307 	orr.w	r3, r3, #7
 8005bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	609a      	str	r2, [r3, #8]
}
 8005bd4:	bf00      	nop
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	021a      	lsls	r2, r3, #8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	bf00      	nop
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e05a      	b.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d022      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d01d      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1b      	ldr	r2, [pc, #108]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1a      	ldr	r2, [pc, #104]	; (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a18      	ldr	r2, [pc, #96]	; (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a17      	ldr	r2, [pc, #92]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a15      	ldr	r2, [pc, #84]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10c      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40000c00 	.word	0x40000c00
 8005d0c:	40010400 	.word	0x40010400
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40001800 	.word	0x40001800

08005d18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e03f      	b.n	8005daa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fb fa86 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2224      	movs	r2, #36	; 0x24
 8005d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fb75 	bl	800644c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d153      	bne.n	8005e76 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_UART_Transmit_DMA+0x26>
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e04c      	b.n	8005e78 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_UART_Transmit_DMA+0x38>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e045      	b.n	8005e78 <HAL_UART_Transmit_DMA+0xc4>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	88fa      	ldrh	r2, [r7, #6]
 8005dfe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	88fa      	ldrh	r2, [r7, #6]
 8005e04:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2221      	movs	r2, #33	; 0x21
 8005e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	4a19      	ldr	r2, [pc, #100]	; (8005e80 <HAL_UART_Transmit_DMA+0xcc>)
 8005e1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	4a18      	ldr	r2, [pc, #96]	; (8005e84 <HAL_UART_Transmit_DMA+0xd0>)
 8005e22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <HAL_UART_Transmit_DMA+0xd4>)
 8005e2a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	2200      	movs	r2, #0
 8005e32:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005e34:	f107 0308 	add.w	r3, r7, #8
 8005e38:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	6819      	ldr	r1, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3304      	adds	r3, #4
 8005e48:	461a      	mov	r2, r3
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	f7fb fdc8 	bl	80019e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e58:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e70:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	e000      	b.n	8005e78 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005e76:	2302      	movs	r3, #2
  }
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	080060dd 	.word	0x080060dd
 8005e84:	0800612f 	.word	0x0800612f
 8005e88:	0800614b 	.word	0x0800614b

08005e8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10d      	bne.n	8005ede <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f003 0320 	and.w	r3, r3, #32
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <HAL_UART_IRQHandler+0x52>
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fa37 	bl	800634a <UART_Receive_IT>
      return;
 8005edc:	e0d1      	b.n	8006082 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80b0 	beq.w	8006046 <HAL_UART_IRQHandler+0x1ba>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d105      	bne.n	8005efc <HAL_UART_IRQHandler+0x70>
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80a5 	beq.w	8006046 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_UART_IRQHandler+0x90>
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f14:	f043 0201 	orr.w	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <HAL_UART_IRQHandler+0xb0>
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f34:	f043 0202 	orr.w	r2, r3, #2
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_UART_IRQHandler+0xd0>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f54:	f043 0204 	orr.w	r2, r3, #4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00f      	beq.n	8005f86 <HAL_UART_IRQHandler+0xfa>
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	f003 0320 	and.w	r3, r3, #32
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <HAL_UART_IRQHandler+0xee>
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	f043 0208 	orr.w	r2, r3, #8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d078      	beq.n	8006080 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x11c>
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9d1 	bl	800634a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	bf0c      	ite	eq
 8005fb6:	2301      	moveq	r3, #1
 8005fb8:	2300      	movne	r3, #0
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d102      	bne.n	8005fd0 <HAL_UART_IRQHandler+0x144>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d031      	beq.n	8006034 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f91a 	bl	800620a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d123      	bne.n	800602c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695a      	ldr	r2, [r3, #20]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d013      	beq.n	8006024 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006000:	4a21      	ldr	r2, [pc, #132]	; (8006088 <HAL_UART_IRQHandler+0x1fc>)
 8006002:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006008:	4618      	mov	r0, r3
 800600a:	f7fb fd41 	bl	8001a90 <HAL_DMA_Abort_IT>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d016      	beq.n	8006042 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800601e:	4610      	mov	r0, r2
 8006020:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006022:	e00e      	b.n	8006042 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f84f 	bl	80060c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602a:	e00a      	b.n	8006042 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f84b 	bl	80060c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006032:	e006      	b.n	8006042 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f847 	bl	80060c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006040:	e01e      	b.n	8006080 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006042:	bf00      	nop
    return;
 8006044:	e01c      	b.n	8006080 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	d008      	beq.n	8006062 <HAL_UART_IRQHandler+0x1d6>
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f907 	bl	800626e <UART_Transmit_IT>
    return;
 8006060:	e00f      	b.n	8006082 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <HAL_UART_IRQHandler+0x1f6>
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f94f 	bl	800631a <UART_EndTransmit_IT>
    return;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006080:	bf00      	nop
  }
}
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	08006247 	.word	0x08006247

0800608c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d113      	bne.n	8006120 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800610c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800611c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800611e:	e002      	b.n	8006126 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff ffb3 	bl	800608c <HAL_UART_TxCpltCallback>
}
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff ffaf 	bl	80060a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006166:	2b80      	cmp	r3, #128	; 0x80
 8006168:	bf0c      	ite	eq
 800616a:	2301      	moveq	r3, #1
 800616c:	2300      	movne	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b21      	cmp	r3, #33	; 0x21
 800617c:	d108      	bne.n	8006190 <UART_DMAError+0x46>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2200      	movs	r2, #0
 8006188:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800618a:	68b8      	ldr	r0, [r7, #8]
 800618c:	f000 f827 	bl	80061de <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619a:	2b40      	cmp	r3, #64	; 0x40
 800619c:	bf0c      	ite	eq
 800619e:	2301      	moveq	r3, #1
 80061a0:	2300      	movne	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b22      	cmp	r3, #34	; 0x22
 80061b0:	d108      	bne.n	80061c4 <UART_DMAError+0x7a>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80061be:	68b8      	ldr	r0, [r7, #8]
 80061c0:	f000 f823 	bl	800620a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c8:	f043 0210 	orr.w	r2, r3, #16
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061d0:	68b8      	ldr	r0, [r7, #8]
 80061d2:	f7ff ff79 	bl	80060c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061d6:	bf00      	nop
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80061f4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006220:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	695a      	ldr	r2, [r3, #20]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0201 	bic.w	r2, r2, #1
 8006230:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f7ff ff31 	bl	80060c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006266:	bf00      	nop
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b21      	cmp	r3, #33	; 0x21
 8006280:	d144      	bne.n	800630c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628a:	d11a      	bne.n	80062c2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062a0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d105      	bne.n	80062b6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	1c9a      	adds	r2, r3, #2
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	621a      	str	r2, [r3, #32]
 80062b4:	e00e      	b.n	80062d4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	621a      	str	r2, [r3, #32]
 80062c0:	e008      	b.n	80062d4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	1c59      	adds	r1, r3, #1
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6211      	str	r1, [r2, #32]
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29b      	uxth	r3, r3
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	4619      	mov	r1, r3
 80062e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10f      	bne.n	8006308 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006306:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	e000      	b.n	800630e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800630c:	2302      	movs	r3, #2
  }
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006330:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fea6 	bl	800608c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b22      	cmp	r3, #34	; 0x22
 800635c:	d171      	bne.n	8006442 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006366:	d123      	bne.n	80063b0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10e      	bne.n	8006394 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	1c9a      	adds	r2, r3, #2
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	629a      	str	r2, [r3, #40]	; 0x28
 8006392:	e029      	b.n	80063e8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	b29b      	uxth	r3, r3
 800639c:	b2db      	uxtb	r3, r3
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	629a      	str	r2, [r3, #40]	; 0x28
 80063ae:	e01b      	b.n	80063e8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10a      	bne.n	80063ce <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6858      	ldr	r0, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	1c59      	adds	r1, r3, #1
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6291      	str	r1, [r2, #40]	; 0x28
 80063c8:	b2c2      	uxtb	r2, r0
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	e00c      	b.n	80063e8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	1c58      	adds	r0, r3, #1
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	6288      	str	r0, [r1, #40]	; 0x28
 80063e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	4619      	mov	r1, r3
 80063f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d120      	bne.n	800643e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0220 	bic.w	r2, r2, #32
 800640a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800641a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0201 	bic.w	r2, r2, #1
 800642a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff fe3d 	bl	80060b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	e002      	b.n	8006444 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	e000      	b.n	8006444 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006442:	2302      	movs	r3, #2
  }
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	b085      	sub	sp, #20
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	431a      	orrs	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800648e:	f023 030c 	bic.w	r3, r3, #12
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6812      	ldr	r2, [r2, #0]
 8006496:	68f9      	ldr	r1, [r7, #12]
 8006498:	430b      	orrs	r3, r1
 800649a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ba:	f040 818b 	bne.w	80067d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4ac1      	ldr	r2, [pc, #772]	; (80067c8 <UART_SetConfig+0x37c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d005      	beq.n	80064d4 <UART_SetConfig+0x88>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4abf      	ldr	r2, [pc, #764]	; (80067cc <UART_SetConfig+0x380>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	f040 80bd 	bne.w	800664e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064d4:	f7fe febe 	bl	8005254 <HAL_RCC_GetPCLK2Freq>
 80064d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	461d      	mov	r5, r3
 80064de:	f04f 0600 	mov.w	r6, #0
 80064e2:	46a8      	mov	r8, r5
 80064e4:	46b1      	mov	r9, r6
 80064e6:	eb18 0308 	adds.w	r3, r8, r8
 80064ea:	eb49 0409 	adc.w	r4, r9, r9
 80064ee:	4698      	mov	r8, r3
 80064f0:	46a1      	mov	r9, r4
 80064f2:	eb18 0805 	adds.w	r8, r8, r5
 80064f6:	eb49 0906 	adc.w	r9, r9, r6
 80064fa:	f04f 0100 	mov.w	r1, #0
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006506:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800650a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800650e:	4688      	mov	r8, r1
 8006510:	4691      	mov	r9, r2
 8006512:	eb18 0005 	adds.w	r0, r8, r5
 8006516:	eb49 0106 	adc.w	r1, r9, r6
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	461d      	mov	r5, r3
 8006520:	f04f 0600 	mov.w	r6, #0
 8006524:	196b      	adds	r3, r5, r5
 8006526:	eb46 0406 	adc.w	r4, r6, r6
 800652a:	461a      	mov	r2, r3
 800652c:	4623      	mov	r3, r4
 800652e:	f7f9 fe9f 	bl	8000270 <__aeabi_uldivmod>
 8006532:	4603      	mov	r3, r0
 8006534:	460c      	mov	r4, r1
 8006536:	461a      	mov	r2, r3
 8006538:	4ba5      	ldr	r3, [pc, #660]	; (80067d0 <UART_SetConfig+0x384>)
 800653a:	fba3 2302 	umull	r2, r3, r3, r2
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	461d      	mov	r5, r3
 8006548:	f04f 0600 	mov.w	r6, #0
 800654c:	46a9      	mov	r9, r5
 800654e:	46b2      	mov	sl, r6
 8006550:	eb19 0309 	adds.w	r3, r9, r9
 8006554:	eb4a 040a 	adc.w	r4, sl, sl
 8006558:	4699      	mov	r9, r3
 800655a:	46a2      	mov	sl, r4
 800655c:	eb19 0905 	adds.w	r9, r9, r5
 8006560:	eb4a 0a06 	adc.w	sl, sl, r6
 8006564:	f04f 0100 	mov.w	r1, #0
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006570:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006574:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006578:	4689      	mov	r9, r1
 800657a:	4692      	mov	sl, r2
 800657c:	eb19 0005 	adds.w	r0, r9, r5
 8006580:	eb4a 0106 	adc.w	r1, sl, r6
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	461d      	mov	r5, r3
 800658a:	f04f 0600 	mov.w	r6, #0
 800658e:	196b      	adds	r3, r5, r5
 8006590:	eb46 0406 	adc.w	r4, r6, r6
 8006594:	461a      	mov	r2, r3
 8006596:	4623      	mov	r3, r4
 8006598:	f7f9 fe6a 	bl	8000270 <__aeabi_uldivmod>
 800659c:	4603      	mov	r3, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	461a      	mov	r2, r3
 80065a2:	4b8b      	ldr	r3, [pc, #556]	; (80067d0 <UART_SetConfig+0x384>)
 80065a4:	fba3 1302 	umull	r1, r3, r3, r2
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	2164      	movs	r1, #100	; 0x64
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	3332      	adds	r3, #50	; 0x32
 80065b6:	4a86      	ldr	r2, [pc, #536]	; (80067d0 <UART_SetConfig+0x384>)
 80065b8:	fba2 2303 	umull	r2, r3, r2, r3
 80065bc:	095b      	lsrs	r3, r3, #5
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065c4:	4498      	add	r8, r3
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	461d      	mov	r5, r3
 80065ca:	f04f 0600 	mov.w	r6, #0
 80065ce:	46a9      	mov	r9, r5
 80065d0:	46b2      	mov	sl, r6
 80065d2:	eb19 0309 	adds.w	r3, r9, r9
 80065d6:	eb4a 040a 	adc.w	r4, sl, sl
 80065da:	4699      	mov	r9, r3
 80065dc:	46a2      	mov	sl, r4
 80065de:	eb19 0905 	adds.w	r9, r9, r5
 80065e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80065e6:	f04f 0100 	mov.w	r1, #0
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065fa:	4689      	mov	r9, r1
 80065fc:	4692      	mov	sl, r2
 80065fe:	eb19 0005 	adds.w	r0, r9, r5
 8006602:	eb4a 0106 	adc.w	r1, sl, r6
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	461d      	mov	r5, r3
 800660c:	f04f 0600 	mov.w	r6, #0
 8006610:	196b      	adds	r3, r5, r5
 8006612:	eb46 0406 	adc.w	r4, r6, r6
 8006616:	461a      	mov	r2, r3
 8006618:	4623      	mov	r3, r4
 800661a:	f7f9 fe29 	bl	8000270 <__aeabi_uldivmod>
 800661e:	4603      	mov	r3, r0
 8006620:	460c      	mov	r4, r1
 8006622:	461a      	mov	r2, r3
 8006624:	4b6a      	ldr	r3, [pc, #424]	; (80067d0 <UART_SetConfig+0x384>)
 8006626:	fba3 1302 	umull	r1, r3, r3, r2
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	2164      	movs	r1, #100	; 0x64
 800662e:	fb01 f303 	mul.w	r3, r1, r3
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	3332      	adds	r3, #50	; 0x32
 8006638:	4a65      	ldr	r2, [pc, #404]	; (80067d0 <UART_SetConfig+0x384>)
 800663a:	fba2 2303 	umull	r2, r3, r2, r3
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	f003 0207 	and.w	r2, r3, #7
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4442      	add	r2, r8
 800664a:	609a      	str	r2, [r3, #8]
 800664c:	e26f      	b.n	8006b2e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800664e:	f7fe fded 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8006652:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	461d      	mov	r5, r3
 8006658:	f04f 0600 	mov.w	r6, #0
 800665c:	46a8      	mov	r8, r5
 800665e:	46b1      	mov	r9, r6
 8006660:	eb18 0308 	adds.w	r3, r8, r8
 8006664:	eb49 0409 	adc.w	r4, r9, r9
 8006668:	4698      	mov	r8, r3
 800666a:	46a1      	mov	r9, r4
 800666c:	eb18 0805 	adds.w	r8, r8, r5
 8006670:	eb49 0906 	adc.w	r9, r9, r6
 8006674:	f04f 0100 	mov.w	r1, #0
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006680:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006684:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006688:	4688      	mov	r8, r1
 800668a:	4691      	mov	r9, r2
 800668c:	eb18 0005 	adds.w	r0, r8, r5
 8006690:	eb49 0106 	adc.w	r1, r9, r6
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	461d      	mov	r5, r3
 800669a:	f04f 0600 	mov.w	r6, #0
 800669e:	196b      	adds	r3, r5, r5
 80066a0:	eb46 0406 	adc.w	r4, r6, r6
 80066a4:	461a      	mov	r2, r3
 80066a6:	4623      	mov	r3, r4
 80066a8:	f7f9 fde2 	bl	8000270 <__aeabi_uldivmod>
 80066ac:	4603      	mov	r3, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	461a      	mov	r2, r3
 80066b2:	4b47      	ldr	r3, [pc, #284]	; (80067d0 <UART_SetConfig+0x384>)
 80066b4:	fba3 2302 	umull	r2, r3, r3, r2
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	461d      	mov	r5, r3
 80066c2:	f04f 0600 	mov.w	r6, #0
 80066c6:	46a9      	mov	r9, r5
 80066c8:	46b2      	mov	sl, r6
 80066ca:	eb19 0309 	adds.w	r3, r9, r9
 80066ce:	eb4a 040a 	adc.w	r4, sl, sl
 80066d2:	4699      	mov	r9, r3
 80066d4:	46a2      	mov	sl, r4
 80066d6:	eb19 0905 	adds.w	r9, r9, r5
 80066da:	eb4a 0a06 	adc.w	sl, sl, r6
 80066de:	f04f 0100 	mov.w	r1, #0
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066f2:	4689      	mov	r9, r1
 80066f4:	4692      	mov	sl, r2
 80066f6:	eb19 0005 	adds.w	r0, r9, r5
 80066fa:	eb4a 0106 	adc.w	r1, sl, r6
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	461d      	mov	r5, r3
 8006704:	f04f 0600 	mov.w	r6, #0
 8006708:	196b      	adds	r3, r5, r5
 800670a:	eb46 0406 	adc.w	r4, r6, r6
 800670e:	461a      	mov	r2, r3
 8006710:	4623      	mov	r3, r4
 8006712:	f7f9 fdad 	bl	8000270 <__aeabi_uldivmod>
 8006716:	4603      	mov	r3, r0
 8006718:	460c      	mov	r4, r1
 800671a:	461a      	mov	r2, r3
 800671c:	4b2c      	ldr	r3, [pc, #176]	; (80067d0 <UART_SetConfig+0x384>)
 800671e:	fba3 1302 	umull	r1, r3, r3, r2
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	2164      	movs	r1, #100	; 0x64
 8006726:	fb01 f303 	mul.w	r3, r1, r3
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	3332      	adds	r3, #50	; 0x32
 8006730:	4a27      	ldr	r2, [pc, #156]	; (80067d0 <UART_SetConfig+0x384>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800673e:	4498      	add	r8, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	461d      	mov	r5, r3
 8006744:	f04f 0600 	mov.w	r6, #0
 8006748:	46a9      	mov	r9, r5
 800674a:	46b2      	mov	sl, r6
 800674c:	eb19 0309 	adds.w	r3, r9, r9
 8006750:	eb4a 040a 	adc.w	r4, sl, sl
 8006754:	4699      	mov	r9, r3
 8006756:	46a2      	mov	sl, r4
 8006758:	eb19 0905 	adds.w	r9, r9, r5
 800675c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006760:	f04f 0100 	mov.w	r1, #0
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800676c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006770:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006774:	4689      	mov	r9, r1
 8006776:	4692      	mov	sl, r2
 8006778:	eb19 0005 	adds.w	r0, r9, r5
 800677c:	eb4a 0106 	adc.w	r1, sl, r6
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	461d      	mov	r5, r3
 8006786:	f04f 0600 	mov.w	r6, #0
 800678a:	196b      	adds	r3, r5, r5
 800678c:	eb46 0406 	adc.w	r4, r6, r6
 8006790:	461a      	mov	r2, r3
 8006792:	4623      	mov	r3, r4
 8006794:	f7f9 fd6c 	bl	8000270 <__aeabi_uldivmod>
 8006798:	4603      	mov	r3, r0
 800679a:	460c      	mov	r4, r1
 800679c:	461a      	mov	r2, r3
 800679e:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <UART_SetConfig+0x384>)
 80067a0:	fba3 1302 	umull	r1, r3, r3, r2
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	2164      	movs	r1, #100	; 0x64
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	3332      	adds	r3, #50	; 0x32
 80067b2:	4a07      	ldr	r2, [pc, #28]	; (80067d0 <UART_SetConfig+0x384>)
 80067b4:	fba2 2303 	umull	r2, r3, r2, r3
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	f003 0207 	and.w	r2, r3, #7
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4442      	add	r2, r8
 80067c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80067c6:	e1b2      	b.n	8006b2e <UART_SetConfig+0x6e2>
 80067c8:	40011000 	.word	0x40011000
 80067cc:	40011400 	.word	0x40011400
 80067d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4ad7      	ldr	r2, [pc, #860]	; (8006b38 <UART_SetConfig+0x6ec>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d005      	beq.n	80067ea <UART_SetConfig+0x39e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4ad6      	ldr	r2, [pc, #856]	; (8006b3c <UART_SetConfig+0x6f0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	f040 80d1 	bne.w	800698c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80067ea:	f7fe fd33 	bl	8005254 <HAL_RCC_GetPCLK2Freq>
 80067ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	469a      	mov	sl, r3
 80067f4:	f04f 0b00 	mov.w	fp, #0
 80067f8:	46d0      	mov	r8, sl
 80067fa:	46d9      	mov	r9, fp
 80067fc:	eb18 0308 	adds.w	r3, r8, r8
 8006800:	eb49 0409 	adc.w	r4, r9, r9
 8006804:	4698      	mov	r8, r3
 8006806:	46a1      	mov	r9, r4
 8006808:	eb18 080a 	adds.w	r8, r8, sl
 800680c:	eb49 090b 	adc.w	r9, r9, fp
 8006810:	f04f 0100 	mov.w	r1, #0
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800681c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006820:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006824:	4688      	mov	r8, r1
 8006826:	4691      	mov	r9, r2
 8006828:	eb1a 0508 	adds.w	r5, sl, r8
 800682c:	eb4b 0609 	adc.w	r6, fp, r9
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4619      	mov	r1, r3
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	f04f 0400 	mov.w	r4, #0
 8006842:	0094      	lsls	r4, r2, #2
 8006844:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006848:	008b      	lsls	r3, r1, #2
 800684a:	461a      	mov	r2, r3
 800684c:	4623      	mov	r3, r4
 800684e:	4628      	mov	r0, r5
 8006850:	4631      	mov	r1, r6
 8006852:	f7f9 fd0d 	bl	8000270 <__aeabi_uldivmod>
 8006856:	4603      	mov	r3, r0
 8006858:	460c      	mov	r4, r1
 800685a:	461a      	mov	r2, r3
 800685c:	4bb8      	ldr	r3, [pc, #736]	; (8006b40 <UART_SetConfig+0x6f4>)
 800685e:	fba3 2302 	umull	r2, r3, r3, r2
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	469b      	mov	fp, r3
 800686c:	f04f 0c00 	mov.w	ip, #0
 8006870:	46d9      	mov	r9, fp
 8006872:	46e2      	mov	sl, ip
 8006874:	eb19 0309 	adds.w	r3, r9, r9
 8006878:	eb4a 040a 	adc.w	r4, sl, sl
 800687c:	4699      	mov	r9, r3
 800687e:	46a2      	mov	sl, r4
 8006880:	eb19 090b 	adds.w	r9, r9, fp
 8006884:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006888:	f04f 0100 	mov.w	r1, #0
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006894:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006898:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800689c:	4689      	mov	r9, r1
 800689e:	4692      	mov	sl, r2
 80068a0:	eb1b 0509 	adds.w	r5, fp, r9
 80068a4:	eb4c 060a 	adc.w	r6, ip, sl
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	4619      	mov	r1, r3
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	f04f 0400 	mov.w	r4, #0
 80068ba:	0094      	lsls	r4, r2, #2
 80068bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068c0:	008b      	lsls	r3, r1, #2
 80068c2:	461a      	mov	r2, r3
 80068c4:	4623      	mov	r3, r4
 80068c6:	4628      	mov	r0, r5
 80068c8:	4631      	mov	r1, r6
 80068ca:	f7f9 fcd1 	bl	8000270 <__aeabi_uldivmod>
 80068ce:	4603      	mov	r3, r0
 80068d0:	460c      	mov	r4, r1
 80068d2:	461a      	mov	r2, r3
 80068d4:	4b9a      	ldr	r3, [pc, #616]	; (8006b40 <UART_SetConfig+0x6f4>)
 80068d6:	fba3 1302 	umull	r1, r3, r3, r2
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	2164      	movs	r1, #100	; 0x64
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	3332      	adds	r3, #50	; 0x32
 80068e8:	4a95      	ldr	r2, [pc, #596]	; (8006b40 <UART_SetConfig+0x6f4>)
 80068ea:	fba2 2303 	umull	r2, r3, r2, r3
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068f4:	4498      	add	r8, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	469b      	mov	fp, r3
 80068fa:	f04f 0c00 	mov.w	ip, #0
 80068fe:	46d9      	mov	r9, fp
 8006900:	46e2      	mov	sl, ip
 8006902:	eb19 0309 	adds.w	r3, r9, r9
 8006906:	eb4a 040a 	adc.w	r4, sl, sl
 800690a:	4699      	mov	r9, r3
 800690c:	46a2      	mov	sl, r4
 800690e:	eb19 090b 	adds.w	r9, r9, fp
 8006912:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006916:	f04f 0100 	mov.w	r1, #0
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006922:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006926:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800692a:	4689      	mov	r9, r1
 800692c:	4692      	mov	sl, r2
 800692e:	eb1b 0509 	adds.w	r5, fp, r9
 8006932:	eb4c 060a 	adc.w	r6, ip, sl
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	4619      	mov	r1, r3
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	f04f 0400 	mov.w	r4, #0
 8006948:	0094      	lsls	r4, r2, #2
 800694a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800694e:	008b      	lsls	r3, r1, #2
 8006950:	461a      	mov	r2, r3
 8006952:	4623      	mov	r3, r4
 8006954:	4628      	mov	r0, r5
 8006956:	4631      	mov	r1, r6
 8006958:	f7f9 fc8a 	bl	8000270 <__aeabi_uldivmod>
 800695c:	4603      	mov	r3, r0
 800695e:	460c      	mov	r4, r1
 8006960:	461a      	mov	r2, r3
 8006962:	4b77      	ldr	r3, [pc, #476]	; (8006b40 <UART_SetConfig+0x6f4>)
 8006964:	fba3 1302 	umull	r1, r3, r3, r2
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	2164      	movs	r1, #100	; 0x64
 800696c:	fb01 f303 	mul.w	r3, r1, r3
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	3332      	adds	r3, #50	; 0x32
 8006976:	4a72      	ldr	r2, [pc, #456]	; (8006b40 <UART_SetConfig+0x6f4>)
 8006978:	fba2 2303 	umull	r2, r3, r2, r3
 800697c:	095b      	lsrs	r3, r3, #5
 800697e:	f003 020f 	and.w	r2, r3, #15
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4442      	add	r2, r8
 8006988:	609a      	str	r2, [r3, #8]
 800698a:	e0d0      	b.n	8006b2e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800698c:	f7fe fc4e 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8006990:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	469a      	mov	sl, r3
 8006996:	f04f 0b00 	mov.w	fp, #0
 800699a:	46d0      	mov	r8, sl
 800699c:	46d9      	mov	r9, fp
 800699e:	eb18 0308 	adds.w	r3, r8, r8
 80069a2:	eb49 0409 	adc.w	r4, r9, r9
 80069a6:	4698      	mov	r8, r3
 80069a8:	46a1      	mov	r9, r4
 80069aa:	eb18 080a 	adds.w	r8, r8, sl
 80069ae:	eb49 090b 	adc.w	r9, r9, fp
 80069b2:	f04f 0100 	mov.w	r1, #0
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069c6:	4688      	mov	r8, r1
 80069c8:	4691      	mov	r9, r2
 80069ca:	eb1a 0508 	adds.w	r5, sl, r8
 80069ce:	eb4b 0609 	adc.w	r6, fp, r9
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	4619      	mov	r1, r3
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	f04f 0400 	mov.w	r4, #0
 80069e4:	0094      	lsls	r4, r2, #2
 80069e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069ea:	008b      	lsls	r3, r1, #2
 80069ec:	461a      	mov	r2, r3
 80069ee:	4623      	mov	r3, r4
 80069f0:	4628      	mov	r0, r5
 80069f2:	4631      	mov	r1, r6
 80069f4:	f7f9 fc3c 	bl	8000270 <__aeabi_uldivmod>
 80069f8:	4603      	mov	r3, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	461a      	mov	r2, r3
 80069fe:	4b50      	ldr	r3, [pc, #320]	; (8006b40 <UART_SetConfig+0x6f4>)
 8006a00:	fba3 2302 	umull	r2, r3, r3, r2
 8006a04:	095b      	lsrs	r3, r3, #5
 8006a06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	469b      	mov	fp, r3
 8006a0e:	f04f 0c00 	mov.w	ip, #0
 8006a12:	46d9      	mov	r9, fp
 8006a14:	46e2      	mov	sl, ip
 8006a16:	eb19 0309 	adds.w	r3, r9, r9
 8006a1a:	eb4a 040a 	adc.w	r4, sl, sl
 8006a1e:	4699      	mov	r9, r3
 8006a20:	46a2      	mov	sl, r4
 8006a22:	eb19 090b 	adds.w	r9, r9, fp
 8006a26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a2a:	f04f 0100 	mov.w	r1, #0
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a3e:	4689      	mov	r9, r1
 8006a40:	4692      	mov	sl, r2
 8006a42:	eb1b 0509 	adds.w	r5, fp, r9
 8006a46:	eb4c 060a 	adc.w	r6, ip, sl
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	f04f 0400 	mov.w	r4, #0
 8006a5c:	0094      	lsls	r4, r2, #2
 8006a5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a62:	008b      	lsls	r3, r1, #2
 8006a64:	461a      	mov	r2, r3
 8006a66:	4623      	mov	r3, r4
 8006a68:	4628      	mov	r0, r5
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	f7f9 fc00 	bl	8000270 <__aeabi_uldivmod>
 8006a70:	4603      	mov	r3, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	461a      	mov	r2, r3
 8006a76:	4b32      	ldr	r3, [pc, #200]	; (8006b40 <UART_SetConfig+0x6f4>)
 8006a78:	fba3 1302 	umull	r1, r3, r3, r2
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	2164      	movs	r1, #100	; 0x64
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	3332      	adds	r3, #50	; 0x32
 8006a8a:	4a2d      	ldr	r2, [pc, #180]	; (8006b40 <UART_SetConfig+0x6f4>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a96:	4498      	add	r8, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	469b      	mov	fp, r3
 8006a9c:	f04f 0c00 	mov.w	ip, #0
 8006aa0:	46d9      	mov	r9, fp
 8006aa2:	46e2      	mov	sl, ip
 8006aa4:	eb19 0309 	adds.w	r3, r9, r9
 8006aa8:	eb4a 040a 	adc.w	r4, sl, sl
 8006aac:	4699      	mov	r9, r3
 8006aae:	46a2      	mov	sl, r4
 8006ab0:	eb19 090b 	adds.w	r9, r9, fp
 8006ab4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ab8:	f04f 0100 	mov.w	r1, #0
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ac4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ac8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006acc:	4689      	mov	r9, r1
 8006ace:	4692      	mov	sl, r2
 8006ad0:	eb1b 0509 	adds.w	r5, fp, r9
 8006ad4:	eb4c 060a 	adc.w	r6, ip, sl
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4619      	mov	r1, r3
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	f04f 0400 	mov.w	r4, #0
 8006aea:	0094      	lsls	r4, r2, #2
 8006aec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006af0:	008b      	lsls	r3, r1, #2
 8006af2:	461a      	mov	r2, r3
 8006af4:	4623      	mov	r3, r4
 8006af6:	4628      	mov	r0, r5
 8006af8:	4631      	mov	r1, r6
 8006afa:	f7f9 fbb9 	bl	8000270 <__aeabi_uldivmod>
 8006afe:	4603      	mov	r3, r0
 8006b00:	460c      	mov	r4, r1
 8006b02:	461a      	mov	r2, r3
 8006b04:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <UART_SetConfig+0x6f4>)
 8006b06:	fba3 1302 	umull	r1, r3, r3, r2
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	2164      	movs	r1, #100	; 0x64
 8006b0e:	fb01 f303 	mul.w	r3, r1, r3
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	3332      	adds	r3, #50	; 0x32
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <UART_SetConfig+0x6f4>)
 8006b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	f003 020f 	and.w	r2, r3, #15
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4442      	add	r2, r8
 8006b2a:	609a      	str	r2, [r3, #8]
}
 8006b2c:	e7ff      	b.n	8006b2e <UART_SetConfig+0x6e2>
 8006b2e:	bf00      	nop
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b38:	40011000 	.word	0x40011000
 8006b3c:	40011400 	.word	0x40011400
 8006b40:	51eb851f 	.word	0x51eb851f

08006b44 <__errno>:
 8006b44:	4b01      	ldr	r3, [pc, #4]	; (8006b4c <__errno+0x8>)
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	2000000c 	.word	0x2000000c

08006b50 <__libc_init_array>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	4e0d      	ldr	r6, [pc, #52]	; (8006b88 <__libc_init_array+0x38>)
 8006b54:	4c0d      	ldr	r4, [pc, #52]	; (8006b8c <__libc_init_array+0x3c>)
 8006b56:	1ba4      	subs	r4, r4, r6
 8006b58:	10a4      	asrs	r4, r4, #2
 8006b5a:	2500      	movs	r5, #0
 8006b5c:	42a5      	cmp	r5, r4
 8006b5e:	d109      	bne.n	8006b74 <__libc_init_array+0x24>
 8006b60:	4e0b      	ldr	r6, [pc, #44]	; (8006b90 <__libc_init_array+0x40>)
 8006b62:	4c0c      	ldr	r4, [pc, #48]	; (8006b94 <__libc_init_array+0x44>)
 8006b64:	f000 fc26 	bl	80073b4 <_init>
 8006b68:	1ba4      	subs	r4, r4, r6
 8006b6a:	10a4      	asrs	r4, r4, #2
 8006b6c:	2500      	movs	r5, #0
 8006b6e:	42a5      	cmp	r5, r4
 8006b70:	d105      	bne.n	8006b7e <__libc_init_array+0x2e>
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b78:	4798      	blx	r3
 8006b7a:	3501      	adds	r5, #1
 8006b7c:	e7ee      	b.n	8006b5c <__libc_init_array+0xc>
 8006b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b82:	4798      	blx	r3
 8006b84:	3501      	adds	r5, #1
 8006b86:	e7f2      	b.n	8006b6e <__libc_init_array+0x1e>
 8006b88:	080074a4 	.word	0x080074a4
 8006b8c:	080074a4 	.word	0x080074a4
 8006b90:	080074a4 	.word	0x080074a4
 8006b94:	080074a8 	.word	0x080074a8

08006b98 <memset>:
 8006b98:	4402      	add	r2, r0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d100      	bne.n	8006ba2 <memset+0xa>
 8006ba0:	4770      	bx	lr
 8006ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ba6:	e7f9      	b.n	8006b9c <memset+0x4>

08006ba8 <siprintf>:
 8006ba8:	b40e      	push	{r1, r2, r3}
 8006baa:	b500      	push	{lr}
 8006bac:	b09c      	sub	sp, #112	; 0x70
 8006bae:	ab1d      	add	r3, sp, #116	; 0x74
 8006bb0:	9002      	str	r0, [sp, #8]
 8006bb2:	9006      	str	r0, [sp, #24]
 8006bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bb8:	4809      	ldr	r0, [pc, #36]	; (8006be0 <siprintf+0x38>)
 8006bba:	9107      	str	r1, [sp, #28]
 8006bbc:	9104      	str	r1, [sp, #16]
 8006bbe:	4909      	ldr	r1, [pc, #36]	; (8006be4 <siprintf+0x3c>)
 8006bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc4:	9105      	str	r1, [sp, #20]
 8006bc6:	6800      	ldr	r0, [r0, #0]
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	a902      	add	r1, sp, #8
 8006bcc:	f000 f866 	bl	8006c9c <_svfiprintf_r>
 8006bd0:	9b02      	ldr	r3, [sp, #8]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	b01c      	add	sp, #112	; 0x70
 8006bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bdc:	b003      	add	sp, #12
 8006bde:	4770      	bx	lr
 8006be0:	2000000c 	.word	0x2000000c
 8006be4:	ffff0208 	.word	0xffff0208

08006be8 <__ssputs_r>:
 8006be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bec:	688e      	ldr	r6, [r1, #8]
 8006bee:	429e      	cmp	r6, r3
 8006bf0:	4682      	mov	sl, r0
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	4690      	mov	r8, r2
 8006bf6:	4699      	mov	r9, r3
 8006bf8:	d837      	bhi.n	8006c6a <__ssputs_r+0x82>
 8006bfa:	898a      	ldrh	r2, [r1, #12]
 8006bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c00:	d031      	beq.n	8006c66 <__ssputs_r+0x7e>
 8006c02:	6825      	ldr	r5, [r4, #0]
 8006c04:	6909      	ldr	r1, [r1, #16]
 8006c06:	1a6f      	subs	r7, r5, r1
 8006c08:	6965      	ldr	r5, [r4, #20]
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c10:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c14:	f109 0301 	add.w	r3, r9, #1
 8006c18:	443b      	add	r3, r7
 8006c1a:	429d      	cmp	r5, r3
 8006c1c:	bf38      	it	cc
 8006c1e:	461d      	movcc	r5, r3
 8006c20:	0553      	lsls	r3, r2, #21
 8006c22:	d530      	bpl.n	8006c86 <__ssputs_r+0x9e>
 8006c24:	4629      	mov	r1, r5
 8006c26:	f000 fb2b 	bl	8007280 <_malloc_r>
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	b950      	cbnz	r0, 8006c44 <__ssputs_r+0x5c>
 8006c2e:	230c      	movs	r3, #12
 8006c30:	f8ca 3000 	str.w	r3, [sl]
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c44:	463a      	mov	r2, r7
 8006c46:	6921      	ldr	r1, [r4, #16]
 8006c48:	f000 faa8 	bl	800719c <memcpy>
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c56:	81a3      	strh	r3, [r4, #12]
 8006c58:	6126      	str	r6, [r4, #16]
 8006c5a:	6165      	str	r5, [r4, #20]
 8006c5c:	443e      	add	r6, r7
 8006c5e:	1bed      	subs	r5, r5, r7
 8006c60:	6026      	str	r6, [r4, #0]
 8006c62:	60a5      	str	r5, [r4, #8]
 8006c64:	464e      	mov	r6, r9
 8006c66:	454e      	cmp	r6, r9
 8006c68:	d900      	bls.n	8006c6c <__ssputs_r+0x84>
 8006c6a:	464e      	mov	r6, r9
 8006c6c:	4632      	mov	r2, r6
 8006c6e:	4641      	mov	r1, r8
 8006c70:	6820      	ldr	r0, [r4, #0]
 8006c72:	f000 fa9e 	bl	80071b2 <memmove>
 8006c76:	68a3      	ldr	r3, [r4, #8]
 8006c78:	1b9b      	subs	r3, r3, r6
 8006c7a:	60a3      	str	r3, [r4, #8]
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	441e      	add	r6, r3
 8006c80:	6026      	str	r6, [r4, #0]
 8006c82:	2000      	movs	r0, #0
 8006c84:	e7dc      	b.n	8006c40 <__ssputs_r+0x58>
 8006c86:	462a      	mov	r2, r5
 8006c88:	f000 fb54 	bl	8007334 <_realloc_r>
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d1e2      	bne.n	8006c58 <__ssputs_r+0x70>
 8006c92:	6921      	ldr	r1, [r4, #16]
 8006c94:	4650      	mov	r0, sl
 8006c96:	f000 faa5 	bl	80071e4 <_free_r>
 8006c9a:	e7c8      	b.n	8006c2e <__ssputs_r+0x46>

08006c9c <_svfiprintf_r>:
 8006c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	461d      	mov	r5, r3
 8006ca2:	898b      	ldrh	r3, [r1, #12]
 8006ca4:	061f      	lsls	r7, r3, #24
 8006ca6:	b09d      	sub	sp, #116	; 0x74
 8006ca8:	4680      	mov	r8, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	4616      	mov	r6, r2
 8006cae:	d50f      	bpl.n	8006cd0 <_svfiprintf_r+0x34>
 8006cb0:	690b      	ldr	r3, [r1, #16]
 8006cb2:	b96b      	cbnz	r3, 8006cd0 <_svfiprintf_r+0x34>
 8006cb4:	2140      	movs	r1, #64	; 0x40
 8006cb6:	f000 fae3 	bl	8007280 <_malloc_r>
 8006cba:	6020      	str	r0, [r4, #0]
 8006cbc:	6120      	str	r0, [r4, #16]
 8006cbe:	b928      	cbnz	r0, 8006ccc <_svfiprintf_r+0x30>
 8006cc0:	230c      	movs	r3, #12
 8006cc2:	f8c8 3000 	str.w	r3, [r8]
 8006cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cca:	e0c8      	b.n	8006e5e <_svfiprintf_r+0x1c2>
 8006ccc:	2340      	movs	r3, #64	; 0x40
 8006cce:	6163      	str	r3, [r4, #20]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd4:	2320      	movs	r3, #32
 8006cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cda:	2330      	movs	r3, #48	; 0x30
 8006cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ce0:	9503      	str	r5, [sp, #12]
 8006ce2:	f04f 0b01 	mov.w	fp, #1
 8006ce6:	4637      	mov	r7, r6
 8006ce8:	463d      	mov	r5, r7
 8006cea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006cee:	b10b      	cbz	r3, 8006cf4 <_svfiprintf_r+0x58>
 8006cf0:	2b25      	cmp	r3, #37	; 0x25
 8006cf2:	d13e      	bne.n	8006d72 <_svfiprintf_r+0xd6>
 8006cf4:	ebb7 0a06 	subs.w	sl, r7, r6
 8006cf8:	d00b      	beq.n	8006d12 <_svfiprintf_r+0x76>
 8006cfa:	4653      	mov	r3, sl
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4640      	mov	r0, r8
 8006d02:	f7ff ff71 	bl	8006be8 <__ssputs_r>
 8006d06:	3001      	adds	r0, #1
 8006d08:	f000 80a4 	beq.w	8006e54 <_svfiprintf_r+0x1b8>
 8006d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0e:	4453      	add	r3, sl
 8006d10:	9309      	str	r3, [sp, #36]	; 0x24
 8006d12:	783b      	ldrb	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 809d 	beq.w	8006e54 <_svfiprintf_r+0x1b8>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d24:	9304      	str	r3, [sp, #16]
 8006d26:	9307      	str	r3, [sp, #28]
 8006d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d2e:	462f      	mov	r7, r5
 8006d30:	2205      	movs	r2, #5
 8006d32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006d36:	4850      	ldr	r0, [pc, #320]	; (8006e78 <_svfiprintf_r+0x1dc>)
 8006d38:	f7f9 fa4a 	bl	80001d0 <memchr>
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	b9d0      	cbnz	r0, 8006d76 <_svfiprintf_r+0xda>
 8006d40:	06d9      	lsls	r1, r3, #27
 8006d42:	bf44      	itt	mi
 8006d44:	2220      	movmi	r2, #32
 8006d46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d4a:	071a      	lsls	r2, r3, #28
 8006d4c:	bf44      	itt	mi
 8006d4e:	222b      	movmi	r2, #43	; 0x2b
 8006d50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d54:	782a      	ldrb	r2, [r5, #0]
 8006d56:	2a2a      	cmp	r2, #42	; 0x2a
 8006d58:	d015      	beq.n	8006d86 <_svfiprintf_r+0xea>
 8006d5a:	9a07      	ldr	r2, [sp, #28]
 8006d5c:	462f      	mov	r7, r5
 8006d5e:	2000      	movs	r0, #0
 8006d60:	250a      	movs	r5, #10
 8006d62:	4639      	mov	r1, r7
 8006d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d68:	3b30      	subs	r3, #48	; 0x30
 8006d6a:	2b09      	cmp	r3, #9
 8006d6c:	d94d      	bls.n	8006e0a <_svfiprintf_r+0x16e>
 8006d6e:	b1b8      	cbz	r0, 8006da0 <_svfiprintf_r+0x104>
 8006d70:	e00f      	b.n	8006d92 <_svfiprintf_r+0xf6>
 8006d72:	462f      	mov	r7, r5
 8006d74:	e7b8      	b.n	8006ce8 <_svfiprintf_r+0x4c>
 8006d76:	4a40      	ldr	r2, [pc, #256]	; (8006e78 <_svfiprintf_r+0x1dc>)
 8006d78:	1a80      	subs	r0, r0, r2
 8006d7a:	fa0b f000 	lsl.w	r0, fp, r0
 8006d7e:	4318      	orrs	r0, r3
 8006d80:	9004      	str	r0, [sp, #16]
 8006d82:	463d      	mov	r5, r7
 8006d84:	e7d3      	b.n	8006d2e <_svfiprintf_r+0x92>
 8006d86:	9a03      	ldr	r2, [sp, #12]
 8006d88:	1d11      	adds	r1, r2, #4
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	9103      	str	r1, [sp, #12]
 8006d8e:	2a00      	cmp	r2, #0
 8006d90:	db01      	blt.n	8006d96 <_svfiprintf_r+0xfa>
 8006d92:	9207      	str	r2, [sp, #28]
 8006d94:	e004      	b.n	8006da0 <_svfiprintf_r+0x104>
 8006d96:	4252      	negs	r2, r2
 8006d98:	f043 0302 	orr.w	r3, r3, #2
 8006d9c:	9207      	str	r2, [sp, #28]
 8006d9e:	9304      	str	r3, [sp, #16]
 8006da0:	783b      	ldrb	r3, [r7, #0]
 8006da2:	2b2e      	cmp	r3, #46	; 0x2e
 8006da4:	d10c      	bne.n	8006dc0 <_svfiprintf_r+0x124>
 8006da6:	787b      	ldrb	r3, [r7, #1]
 8006da8:	2b2a      	cmp	r3, #42	; 0x2a
 8006daa:	d133      	bne.n	8006e14 <_svfiprintf_r+0x178>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	1d1a      	adds	r2, r3, #4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	9203      	str	r2, [sp, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bfb8      	it	lt
 8006db8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006dbc:	3702      	adds	r7, #2
 8006dbe:	9305      	str	r3, [sp, #20]
 8006dc0:	4d2e      	ldr	r5, [pc, #184]	; (8006e7c <_svfiprintf_r+0x1e0>)
 8006dc2:	7839      	ldrb	r1, [r7, #0]
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f7f9 fa02 	bl	80001d0 <memchr>
 8006dcc:	b138      	cbz	r0, 8006dde <_svfiprintf_r+0x142>
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	1b40      	subs	r0, r0, r5
 8006dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8006dd6:	9b04      	ldr	r3, [sp, #16]
 8006dd8:	4303      	orrs	r3, r0
 8006dda:	3701      	adds	r7, #1
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	7839      	ldrb	r1, [r7, #0]
 8006de0:	4827      	ldr	r0, [pc, #156]	; (8006e80 <_svfiprintf_r+0x1e4>)
 8006de2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006de6:	2206      	movs	r2, #6
 8006de8:	1c7e      	adds	r6, r7, #1
 8006dea:	f7f9 f9f1 	bl	80001d0 <memchr>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d038      	beq.n	8006e64 <_svfiprintf_r+0x1c8>
 8006df2:	4b24      	ldr	r3, [pc, #144]	; (8006e84 <_svfiprintf_r+0x1e8>)
 8006df4:	bb13      	cbnz	r3, 8006e3c <_svfiprintf_r+0x1a0>
 8006df6:	9b03      	ldr	r3, [sp, #12]
 8006df8:	3307      	adds	r3, #7
 8006dfa:	f023 0307 	bic.w	r3, r3, #7
 8006dfe:	3308      	adds	r3, #8
 8006e00:	9303      	str	r3, [sp, #12]
 8006e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e04:	444b      	add	r3, r9
 8006e06:	9309      	str	r3, [sp, #36]	; 0x24
 8006e08:	e76d      	b.n	8006ce6 <_svfiprintf_r+0x4a>
 8006e0a:	fb05 3202 	mla	r2, r5, r2, r3
 8006e0e:	2001      	movs	r0, #1
 8006e10:	460f      	mov	r7, r1
 8006e12:	e7a6      	b.n	8006d62 <_svfiprintf_r+0xc6>
 8006e14:	2300      	movs	r3, #0
 8006e16:	3701      	adds	r7, #1
 8006e18:	9305      	str	r3, [sp, #20]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	250a      	movs	r5, #10
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e24:	3a30      	subs	r2, #48	; 0x30
 8006e26:	2a09      	cmp	r2, #9
 8006e28:	d903      	bls.n	8006e32 <_svfiprintf_r+0x196>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0c8      	beq.n	8006dc0 <_svfiprintf_r+0x124>
 8006e2e:	9105      	str	r1, [sp, #20]
 8006e30:	e7c6      	b.n	8006dc0 <_svfiprintf_r+0x124>
 8006e32:	fb05 2101 	mla	r1, r5, r1, r2
 8006e36:	2301      	movs	r3, #1
 8006e38:	4607      	mov	r7, r0
 8006e3a:	e7f0      	b.n	8006e1e <_svfiprintf_r+0x182>
 8006e3c:	ab03      	add	r3, sp, #12
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	4622      	mov	r2, r4
 8006e42:	4b11      	ldr	r3, [pc, #68]	; (8006e88 <_svfiprintf_r+0x1ec>)
 8006e44:	a904      	add	r1, sp, #16
 8006e46:	4640      	mov	r0, r8
 8006e48:	f3af 8000 	nop.w
 8006e4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006e50:	4681      	mov	r9, r0
 8006e52:	d1d6      	bne.n	8006e02 <_svfiprintf_r+0x166>
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	065b      	lsls	r3, r3, #25
 8006e58:	f53f af35 	bmi.w	8006cc6 <_svfiprintf_r+0x2a>
 8006e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e5e:	b01d      	add	sp, #116	; 0x74
 8006e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e64:	ab03      	add	r3, sp, #12
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	4622      	mov	r2, r4
 8006e6a:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <_svfiprintf_r+0x1ec>)
 8006e6c:	a904      	add	r1, sp, #16
 8006e6e:	4640      	mov	r0, r8
 8006e70:	f000 f882 	bl	8006f78 <_printf_i>
 8006e74:	e7ea      	b.n	8006e4c <_svfiprintf_r+0x1b0>
 8006e76:	bf00      	nop
 8006e78:	08007468 	.word	0x08007468
 8006e7c:	0800746e 	.word	0x0800746e
 8006e80:	08007472 	.word	0x08007472
 8006e84:	00000000 	.word	0x00000000
 8006e88:	08006be9 	.word	0x08006be9

08006e8c <_printf_common>:
 8006e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e90:	4691      	mov	r9, r2
 8006e92:	461f      	mov	r7, r3
 8006e94:	688a      	ldr	r2, [r1, #8]
 8006e96:	690b      	ldr	r3, [r1, #16]
 8006e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	bfb8      	it	lt
 8006ea0:	4613      	movlt	r3, r2
 8006ea2:	f8c9 3000 	str.w	r3, [r9]
 8006ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006eaa:	4606      	mov	r6, r0
 8006eac:	460c      	mov	r4, r1
 8006eae:	b112      	cbz	r2, 8006eb6 <_printf_common+0x2a>
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	f8c9 3000 	str.w	r3, [r9]
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	0699      	lsls	r1, r3, #26
 8006eba:	bf42      	ittt	mi
 8006ebc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ec0:	3302      	addmi	r3, #2
 8006ec2:	f8c9 3000 	strmi.w	r3, [r9]
 8006ec6:	6825      	ldr	r5, [r4, #0]
 8006ec8:	f015 0506 	ands.w	r5, r5, #6
 8006ecc:	d107      	bne.n	8006ede <_printf_common+0x52>
 8006ece:	f104 0a19 	add.w	sl, r4, #25
 8006ed2:	68e3      	ldr	r3, [r4, #12]
 8006ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	42ab      	cmp	r3, r5
 8006edc:	dc28      	bgt.n	8006f30 <_printf_common+0xa4>
 8006ede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	3300      	adds	r3, #0
 8006ee6:	bf18      	it	ne
 8006ee8:	2301      	movne	r3, #1
 8006eea:	0692      	lsls	r2, r2, #26
 8006eec:	d42d      	bmi.n	8006f4a <_printf_common+0xbe>
 8006eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	47c0      	blx	r8
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d020      	beq.n	8006f3e <_printf_common+0xb2>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	68e5      	ldr	r5, [r4, #12]
 8006f00:	f8d9 2000 	ldr.w	r2, [r9]
 8006f04:	f003 0306 	and.w	r3, r3, #6
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	bf08      	it	eq
 8006f0c:	1aad      	subeq	r5, r5, r2
 8006f0e:	68a3      	ldr	r3, [r4, #8]
 8006f10:	6922      	ldr	r2, [r4, #16]
 8006f12:	bf0c      	ite	eq
 8006f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f18:	2500      	movne	r5, #0
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	bfc4      	itt	gt
 8006f1e:	1a9b      	subgt	r3, r3, r2
 8006f20:	18ed      	addgt	r5, r5, r3
 8006f22:	f04f 0900 	mov.w	r9, #0
 8006f26:	341a      	adds	r4, #26
 8006f28:	454d      	cmp	r5, r9
 8006f2a:	d11a      	bne.n	8006f62 <_printf_common+0xd6>
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e008      	b.n	8006f42 <_printf_common+0xb6>
 8006f30:	2301      	movs	r3, #1
 8006f32:	4652      	mov	r2, sl
 8006f34:	4639      	mov	r1, r7
 8006f36:	4630      	mov	r0, r6
 8006f38:	47c0      	blx	r8
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d103      	bne.n	8006f46 <_printf_common+0xba>
 8006f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f46:	3501      	adds	r5, #1
 8006f48:	e7c3      	b.n	8006ed2 <_printf_common+0x46>
 8006f4a:	18e1      	adds	r1, r4, r3
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	2030      	movs	r0, #48	; 0x30
 8006f50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f54:	4422      	add	r2, r4
 8006f56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f5e:	3302      	adds	r3, #2
 8006f60:	e7c5      	b.n	8006eee <_printf_common+0x62>
 8006f62:	2301      	movs	r3, #1
 8006f64:	4622      	mov	r2, r4
 8006f66:	4639      	mov	r1, r7
 8006f68:	4630      	mov	r0, r6
 8006f6a:	47c0      	blx	r8
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d0e6      	beq.n	8006f3e <_printf_common+0xb2>
 8006f70:	f109 0901 	add.w	r9, r9, #1
 8006f74:	e7d8      	b.n	8006f28 <_printf_common+0x9c>
	...

08006f78 <_printf_i>:
 8006f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f80:	460c      	mov	r4, r1
 8006f82:	7e09      	ldrb	r1, [r1, #24]
 8006f84:	b085      	sub	sp, #20
 8006f86:	296e      	cmp	r1, #110	; 0x6e
 8006f88:	4617      	mov	r7, r2
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	4698      	mov	r8, r3
 8006f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f90:	f000 80b3 	beq.w	80070fa <_printf_i+0x182>
 8006f94:	d822      	bhi.n	8006fdc <_printf_i+0x64>
 8006f96:	2963      	cmp	r1, #99	; 0x63
 8006f98:	d036      	beq.n	8007008 <_printf_i+0x90>
 8006f9a:	d80a      	bhi.n	8006fb2 <_printf_i+0x3a>
 8006f9c:	2900      	cmp	r1, #0
 8006f9e:	f000 80b9 	beq.w	8007114 <_printf_i+0x19c>
 8006fa2:	2958      	cmp	r1, #88	; 0x58
 8006fa4:	f000 8083 	beq.w	80070ae <_printf_i+0x136>
 8006fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006fb0:	e032      	b.n	8007018 <_printf_i+0xa0>
 8006fb2:	2964      	cmp	r1, #100	; 0x64
 8006fb4:	d001      	beq.n	8006fba <_printf_i+0x42>
 8006fb6:	2969      	cmp	r1, #105	; 0x69
 8006fb8:	d1f6      	bne.n	8006fa8 <_printf_i+0x30>
 8006fba:	6820      	ldr	r0, [r4, #0]
 8006fbc:	6813      	ldr	r3, [r2, #0]
 8006fbe:	0605      	lsls	r5, r0, #24
 8006fc0:	f103 0104 	add.w	r1, r3, #4
 8006fc4:	d52a      	bpl.n	800701c <_printf_i+0xa4>
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6011      	str	r1, [r2, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	da03      	bge.n	8006fd6 <_printf_i+0x5e>
 8006fce:	222d      	movs	r2, #45	; 0x2d
 8006fd0:	425b      	negs	r3, r3
 8006fd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006fd6:	486f      	ldr	r0, [pc, #444]	; (8007194 <_printf_i+0x21c>)
 8006fd8:	220a      	movs	r2, #10
 8006fda:	e039      	b.n	8007050 <_printf_i+0xd8>
 8006fdc:	2973      	cmp	r1, #115	; 0x73
 8006fde:	f000 809d 	beq.w	800711c <_printf_i+0x1a4>
 8006fe2:	d808      	bhi.n	8006ff6 <_printf_i+0x7e>
 8006fe4:	296f      	cmp	r1, #111	; 0x6f
 8006fe6:	d020      	beq.n	800702a <_printf_i+0xb2>
 8006fe8:	2970      	cmp	r1, #112	; 0x70
 8006fea:	d1dd      	bne.n	8006fa8 <_printf_i+0x30>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	f043 0320 	orr.w	r3, r3, #32
 8006ff2:	6023      	str	r3, [r4, #0]
 8006ff4:	e003      	b.n	8006ffe <_printf_i+0x86>
 8006ff6:	2975      	cmp	r1, #117	; 0x75
 8006ff8:	d017      	beq.n	800702a <_printf_i+0xb2>
 8006ffa:	2978      	cmp	r1, #120	; 0x78
 8006ffc:	d1d4      	bne.n	8006fa8 <_printf_i+0x30>
 8006ffe:	2378      	movs	r3, #120	; 0x78
 8007000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007004:	4864      	ldr	r0, [pc, #400]	; (8007198 <_printf_i+0x220>)
 8007006:	e055      	b.n	80070b4 <_printf_i+0x13c>
 8007008:	6813      	ldr	r3, [r2, #0]
 800700a:	1d19      	adds	r1, r3, #4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6011      	str	r1, [r2, #0]
 8007010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007018:	2301      	movs	r3, #1
 800701a:	e08c      	b.n	8007136 <_printf_i+0x1be>
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6011      	str	r1, [r2, #0]
 8007020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007024:	bf18      	it	ne
 8007026:	b21b      	sxthne	r3, r3
 8007028:	e7cf      	b.n	8006fca <_printf_i+0x52>
 800702a:	6813      	ldr	r3, [r2, #0]
 800702c:	6825      	ldr	r5, [r4, #0]
 800702e:	1d18      	adds	r0, r3, #4
 8007030:	6010      	str	r0, [r2, #0]
 8007032:	0628      	lsls	r0, r5, #24
 8007034:	d501      	bpl.n	800703a <_printf_i+0xc2>
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	e002      	b.n	8007040 <_printf_i+0xc8>
 800703a:	0668      	lsls	r0, r5, #25
 800703c:	d5fb      	bpl.n	8007036 <_printf_i+0xbe>
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	4854      	ldr	r0, [pc, #336]	; (8007194 <_printf_i+0x21c>)
 8007042:	296f      	cmp	r1, #111	; 0x6f
 8007044:	bf14      	ite	ne
 8007046:	220a      	movne	r2, #10
 8007048:	2208      	moveq	r2, #8
 800704a:	2100      	movs	r1, #0
 800704c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007050:	6865      	ldr	r5, [r4, #4]
 8007052:	60a5      	str	r5, [r4, #8]
 8007054:	2d00      	cmp	r5, #0
 8007056:	f2c0 8095 	blt.w	8007184 <_printf_i+0x20c>
 800705a:	6821      	ldr	r1, [r4, #0]
 800705c:	f021 0104 	bic.w	r1, r1, #4
 8007060:	6021      	str	r1, [r4, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d13d      	bne.n	80070e2 <_printf_i+0x16a>
 8007066:	2d00      	cmp	r5, #0
 8007068:	f040 808e 	bne.w	8007188 <_printf_i+0x210>
 800706c:	4665      	mov	r5, ip
 800706e:	2a08      	cmp	r2, #8
 8007070:	d10b      	bne.n	800708a <_printf_i+0x112>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	07db      	lsls	r3, r3, #31
 8007076:	d508      	bpl.n	800708a <_printf_i+0x112>
 8007078:	6923      	ldr	r3, [r4, #16]
 800707a:	6862      	ldr	r2, [r4, #4]
 800707c:	429a      	cmp	r2, r3
 800707e:	bfde      	ittt	le
 8007080:	2330      	movle	r3, #48	; 0x30
 8007082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007086:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800708a:	ebac 0305 	sub.w	r3, ip, r5
 800708e:	6123      	str	r3, [r4, #16]
 8007090:	f8cd 8000 	str.w	r8, [sp]
 8007094:	463b      	mov	r3, r7
 8007096:	aa03      	add	r2, sp, #12
 8007098:	4621      	mov	r1, r4
 800709a:	4630      	mov	r0, r6
 800709c:	f7ff fef6 	bl	8006e8c <_printf_common>
 80070a0:	3001      	adds	r0, #1
 80070a2:	d14d      	bne.n	8007140 <_printf_i+0x1c8>
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070a8:	b005      	add	sp, #20
 80070aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070ae:	4839      	ldr	r0, [pc, #228]	; (8007194 <_printf_i+0x21c>)
 80070b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80070b4:	6813      	ldr	r3, [r2, #0]
 80070b6:	6821      	ldr	r1, [r4, #0]
 80070b8:	1d1d      	adds	r5, r3, #4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6015      	str	r5, [r2, #0]
 80070be:	060a      	lsls	r2, r1, #24
 80070c0:	d50b      	bpl.n	80070da <_printf_i+0x162>
 80070c2:	07ca      	lsls	r2, r1, #31
 80070c4:	bf44      	itt	mi
 80070c6:	f041 0120 	orrmi.w	r1, r1, #32
 80070ca:	6021      	strmi	r1, [r4, #0]
 80070cc:	b91b      	cbnz	r3, 80070d6 <_printf_i+0x15e>
 80070ce:	6822      	ldr	r2, [r4, #0]
 80070d0:	f022 0220 	bic.w	r2, r2, #32
 80070d4:	6022      	str	r2, [r4, #0]
 80070d6:	2210      	movs	r2, #16
 80070d8:	e7b7      	b.n	800704a <_printf_i+0xd2>
 80070da:	064d      	lsls	r5, r1, #25
 80070dc:	bf48      	it	mi
 80070de:	b29b      	uxthmi	r3, r3
 80070e0:	e7ef      	b.n	80070c2 <_printf_i+0x14a>
 80070e2:	4665      	mov	r5, ip
 80070e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80070e8:	fb02 3311 	mls	r3, r2, r1, r3
 80070ec:	5cc3      	ldrb	r3, [r0, r3]
 80070ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80070f2:	460b      	mov	r3, r1
 80070f4:	2900      	cmp	r1, #0
 80070f6:	d1f5      	bne.n	80070e4 <_printf_i+0x16c>
 80070f8:	e7b9      	b.n	800706e <_printf_i+0xf6>
 80070fa:	6813      	ldr	r3, [r2, #0]
 80070fc:	6825      	ldr	r5, [r4, #0]
 80070fe:	6961      	ldr	r1, [r4, #20]
 8007100:	1d18      	adds	r0, r3, #4
 8007102:	6010      	str	r0, [r2, #0]
 8007104:	0628      	lsls	r0, r5, #24
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	d501      	bpl.n	800710e <_printf_i+0x196>
 800710a:	6019      	str	r1, [r3, #0]
 800710c:	e002      	b.n	8007114 <_printf_i+0x19c>
 800710e:	066a      	lsls	r2, r5, #25
 8007110:	d5fb      	bpl.n	800710a <_printf_i+0x192>
 8007112:	8019      	strh	r1, [r3, #0]
 8007114:	2300      	movs	r3, #0
 8007116:	6123      	str	r3, [r4, #16]
 8007118:	4665      	mov	r5, ip
 800711a:	e7b9      	b.n	8007090 <_printf_i+0x118>
 800711c:	6813      	ldr	r3, [r2, #0]
 800711e:	1d19      	adds	r1, r3, #4
 8007120:	6011      	str	r1, [r2, #0]
 8007122:	681d      	ldr	r5, [r3, #0]
 8007124:	6862      	ldr	r2, [r4, #4]
 8007126:	2100      	movs	r1, #0
 8007128:	4628      	mov	r0, r5
 800712a:	f7f9 f851 	bl	80001d0 <memchr>
 800712e:	b108      	cbz	r0, 8007134 <_printf_i+0x1bc>
 8007130:	1b40      	subs	r0, r0, r5
 8007132:	6060      	str	r0, [r4, #4]
 8007134:	6863      	ldr	r3, [r4, #4]
 8007136:	6123      	str	r3, [r4, #16]
 8007138:	2300      	movs	r3, #0
 800713a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800713e:	e7a7      	b.n	8007090 <_printf_i+0x118>
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	462a      	mov	r2, r5
 8007144:	4639      	mov	r1, r7
 8007146:	4630      	mov	r0, r6
 8007148:	47c0      	blx	r8
 800714a:	3001      	adds	r0, #1
 800714c:	d0aa      	beq.n	80070a4 <_printf_i+0x12c>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	079b      	lsls	r3, r3, #30
 8007152:	d413      	bmi.n	800717c <_printf_i+0x204>
 8007154:	68e0      	ldr	r0, [r4, #12]
 8007156:	9b03      	ldr	r3, [sp, #12]
 8007158:	4298      	cmp	r0, r3
 800715a:	bfb8      	it	lt
 800715c:	4618      	movlt	r0, r3
 800715e:	e7a3      	b.n	80070a8 <_printf_i+0x130>
 8007160:	2301      	movs	r3, #1
 8007162:	464a      	mov	r2, r9
 8007164:	4639      	mov	r1, r7
 8007166:	4630      	mov	r0, r6
 8007168:	47c0      	blx	r8
 800716a:	3001      	adds	r0, #1
 800716c:	d09a      	beq.n	80070a4 <_printf_i+0x12c>
 800716e:	3501      	adds	r5, #1
 8007170:	68e3      	ldr	r3, [r4, #12]
 8007172:	9a03      	ldr	r2, [sp, #12]
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	42ab      	cmp	r3, r5
 8007178:	dcf2      	bgt.n	8007160 <_printf_i+0x1e8>
 800717a:	e7eb      	b.n	8007154 <_printf_i+0x1dc>
 800717c:	2500      	movs	r5, #0
 800717e:	f104 0919 	add.w	r9, r4, #25
 8007182:	e7f5      	b.n	8007170 <_printf_i+0x1f8>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1ac      	bne.n	80070e2 <_printf_i+0x16a>
 8007188:	7803      	ldrb	r3, [r0, #0]
 800718a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800718e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007192:	e76c      	b.n	800706e <_printf_i+0xf6>
 8007194:	08007479 	.word	0x08007479
 8007198:	0800748a 	.word	0x0800748a

0800719c <memcpy>:
 800719c:	b510      	push	{r4, lr}
 800719e:	1e43      	subs	r3, r0, #1
 80071a0:	440a      	add	r2, r1
 80071a2:	4291      	cmp	r1, r2
 80071a4:	d100      	bne.n	80071a8 <memcpy+0xc>
 80071a6:	bd10      	pop	{r4, pc}
 80071a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071b0:	e7f7      	b.n	80071a2 <memcpy+0x6>

080071b2 <memmove>:
 80071b2:	4288      	cmp	r0, r1
 80071b4:	b510      	push	{r4, lr}
 80071b6:	eb01 0302 	add.w	r3, r1, r2
 80071ba:	d807      	bhi.n	80071cc <memmove+0x1a>
 80071bc:	1e42      	subs	r2, r0, #1
 80071be:	4299      	cmp	r1, r3
 80071c0:	d00a      	beq.n	80071d8 <memmove+0x26>
 80071c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80071ca:	e7f8      	b.n	80071be <memmove+0xc>
 80071cc:	4283      	cmp	r3, r0
 80071ce:	d9f5      	bls.n	80071bc <memmove+0xa>
 80071d0:	1881      	adds	r1, r0, r2
 80071d2:	1ad2      	subs	r2, r2, r3
 80071d4:	42d3      	cmn	r3, r2
 80071d6:	d100      	bne.n	80071da <memmove+0x28>
 80071d8:	bd10      	pop	{r4, pc}
 80071da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80071e2:	e7f7      	b.n	80071d4 <memmove+0x22>

080071e4 <_free_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4605      	mov	r5, r0
 80071e8:	2900      	cmp	r1, #0
 80071ea:	d045      	beq.n	8007278 <_free_r+0x94>
 80071ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f0:	1f0c      	subs	r4, r1, #4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bfb8      	it	lt
 80071f6:	18e4      	addlt	r4, r4, r3
 80071f8:	f000 f8d2 	bl	80073a0 <__malloc_lock>
 80071fc:	4a1f      	ldr	r2, [pc, #124]	; (800727c <_free_r+0x98>)
 80071fe:	6813      	ldr	r3, [r2, #0]
 8007200:	4610      	mov	r0, r2
 8007202:	b933      	cbnz	r3, 8007212 <_free_r+0x2e>
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	6014      	str	r4, [r2, #0]
 8007208:	4628      	mov	r0, r5
 800720a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800720e:	f000 b8c8 	b.w	80073a2 <__malloc_unlock>
 8007212:	42a3      	cmp	r3, r4
 8007214:	d90c      	bls.n	8007230 <_free_r+0x4c>
 8007216:	6821      	ldr	r1, [r4, #0]
 8007218:	1862      	adds	r2, r4, r1
 800721a:	4293      	cmp	r3, r2
 800721c:	bf04      	itt	eq
 800721e:	681a      	ldreq	r2, [r3, #0]
 8007220:	685b      	ldreq	r3, [r3, #4]
 8007222:	6063      	str	r3, [r4, #4]
 8007224:	bf04      	itt	eq
 8007226:	1852      	addeq	r2, r2, r1
 8007228:	6022      	streq	r2, [r4, #0]
 800722a:	6004      	str	r4, [r0, #0]
 800722c:	e7ec      	b.n	8007208 <_free_r+0x24>
 800722e:	4613      	mov	r3, r2
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	b10a      	cbz	r2, 8007238 <_free_r+0x54>
 8007234:	42a2      	cmp	r2, r4
 8007236:	d9fa      	bls.n	800722e <_free_r+0x4a>
 8007238:	6819      	ldr	r1, [r3, #0]
 800723a:	1858      	adds	r0, r3, r1
 800723c:	42a0      	cmp	r0, r4
 800723e:	d10b      	bne.n	8007258 <_free_r+0x74>
 8007240:	6820      	ldr	r0, [r4, #0]
 8007242:	4401      	add	r1, r0
 8007244:	1858      	adds	r0, r3, r1
 8007246:	4282      	cmp	r2, r0
 8007248:	6019      	str	r1, [r3, #0]
 800724a:	d1dd      	bne.n	8007208 <_free_r+0x24>
 800724c:	6810      	ldr	r0, [r2, #0]
 800724e:	6852      	ldr	r2, [r2, #4]
 8007250:	605a      	str	r2, [r3, #4]
 8007252:	4401      	add	r1, r0
 8007254:	6019      	str	r1, [r3, #0]
 8007256:	e7d7      	b.n	8007208 <_free_r+0x24>
 8007258:	d902      	bls.n	8007260 <_free_r+0x7c>
 800725a:	230c      	movs	r3, #12
 800725c:	602b      	str	r3, [r5, #0]
 800725e:	e7d3      	b.n	8007208 <_free_r+0x24>
 8007260:	6820      	ldr	r0, [r4, #0]
 8007262:	1821      	adds	r1, r4, r0
 8007264:	428a      	cmp	r2, r1
 8007266:	bf04      	itt	eq
 8007268:	6811      	ldreq	r1, [r2, #0]
 800726a:	6852      	ldreq	r2, [r2, #4]
 800726c:	6062      	str	r2, [r4, #4]
 800726e:	bf04      	itt	eq
 8007270:	1809      	addeq	r1, r1, r0
 8007272:	6021      	streq	r1, [r4, #0]
 8007274:	605c      	str	r4, [r3, #4]
 8007276:	e7c7      	b.n	8007208 <_free_r+0x24>
 8007278:	bd38      	pop	{r3, r4, r5, pc}
 800727a:	bf00      	nop
 800727c:	200000bc 	.word	0x200000bc

08007280 <_malloc_r>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	1ccd      	adds	r5, r1, #3
 8007284:	f025 0503 	bic.w	r5, r5, #3
 8007288:	3508      	adds	r5, #8
 800728a:	2d0c      	cmp	r5, #12
 800728c:	bf38      	it	cc
 800728e:	250c      	movcc	r5, #12
 8007290:	2d00      	cmp	r5, #0
 8007292:	4606      	mov	r6, r0
 8007294:	db01      	blt.n	800729a <_malloc_r+0x1a>
 8007296:	42a9      	cmp	r1, r5
 8007298:	d903      	bls.n	80072a2 <_malloc_r+0x22>
 800729a:	230c      	movs	r3, #12
 800729c:	6033      	str	r3, [r6, #0]
 800729e:	2000      	movs	r0, #0
 80072a0:	bd70      	pop	{r4, r5, r6, pc}
 80072a2:	f000 f87d 	bl	80073a0 <__malloc_lock>
 80072a6:	4a21      	ldr	r2, [pc, #132]	; (800732c <_malloc_r+0xac>)
 80072a8:	6814      	ldr	r4, [r2, #0]
 80072aa:	4621      	mov	r1, r4
 80072ac:	b991      	cbnz	r1, 80072d4 <_malloc_r+0x54>
 80072ae:	4c20      	ldr	r4, [pc, #128]	; (8007330 <_malloc_r+0xb0>)
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	b91b      	cbnz	r3, 80072bc <_malloc_r+0x3c>
 80072b4:	4630      	mov	r0, r6
 80072b6:	f000 f863 	bl	8007380 <_sbrk_r>
 80072ba:	6020      	str	r0, [r4, #0]
 80072bc:	4629      	mov	r1, r5
 80072be:	4630      	mov	r0, r6
 80072c0:	f000 f85e 	bl	8007380 <_sbrk_r>
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	d124      	bne.n	8007312 <_malloc_r+0x92>
 80072c8:	230c      	movs	r3, #12
 80072ca:	6033      	str	r3, [r6, #0]
 80072cc:	4630      	mov	r0, r6
 80072ce:	f000 f868 	bl	80073a2 <__malloc_unlock>
 80072d2:	e7e4      	b.n	800729e <_malloc_r+0x1e>
 80072d4:	680b      	ldr	r3, [r1, #0]
 80072d6:	1b5b      	subs	r3, r3, r5
 80072d8:	d418      	bmi.n	800730c <_malloc_r+0x8c>
 80072da:	2b0b      	cmp	r3, #11
 80072dc:	d90f      	bls.n	80072fe <_malloc_r+0x7e>
 80072de:	600b      	str	r3, [r1, #0]
 80072e0:	50cd      	str	r5, [r1, r3]
 80072e2:	18cc      	adds	r4, r1, r3
 80072e4:	4630      	mov	r0, r6
 80072e6:	f000 f85c 	bl	80073a2 <__malloc_unlock>
 80072ea:	f104 000b 	add.w	r0, r4, #11
 80072ee:	1d23      	adds	r3, r4, #4
 80072f0:	f020 0007 	bic.w	r0, r0, #7
 80072f4:	1ac3      	subs	r3, r0, r3
 80072f6:	d0d3      	beq.n	80072a0 <_malloc_r+0x20>
 80072f8:	425a      	negs	r2, r3
 80072fa:	50e2      	str	r2, [r4, r3]
 80072fc:	e7d0      	b.n	80072a0 <_malloc_r+0x20>
 80072fe:	428c      	cmp	r4, r1
 8007300:	684b      	ldr	r3, [r1, #4]
 8007302:	bf16      	itet	ne
 8007304:	6063      	strne	r3, [r4, #4]
 8007306:	6013      	streq	r3, [r2, #0]
 8007308:	460c      	movne	r4, r1
 800730a:	e7eb      	b.n	80072e4 <_malloc_r+0x64>
 800730c:	460c      	mov	r4, r1
 800730e:	6849      	ldr	r1, [r1, #4]
 8007310:	e7cc      	b.n	80072ac <_malloc_r+0x2c>
 8007312:	1cc4      	adds	r4, r0, #3
 8007314:	f024 0403 	bic.w	r4, r4, #3
 8007318:	42a0      	cmp	r0, r4
 800731a:	d005      	beq.n	8007328 <_malloc_r+0xa8>
 800731c:	1a21      	subs	r1, r4, r0
 800731e:	4630      	mov	r0, r6
 8007320:	f000 f82e 	bl	8007380 <_sbrk_r>
 8007324:	3001      	adds	r0, #1
 8007326:	d0cf      	beq.n	80072c8 <_malloc_r+0x48>
 8007328:	6025      	str	r5, [r4, #0]
 800732a:	e7db      	b.n	80072e4 <_malloc_r+0x64>
 800732c:	200000bc 	.word	0x200000bc
 8007330:	200000c0 	.word	0x200000c0

08007334 <_realloc_r>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	4607      	mov	r7, r0
 8007338:	4614      	mov	r4, r2
 800733a:	460e      	mov	r6, r1
 800733c:	b921      	cbnz	r1, 8007348 <_realloc_r+0x14>
 800733e:	4611      	mov	r1, r2
 8007340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007344:	f7ff bf9c 	b.w	8007280 <_malloc_r>
 8007348:	b922      	cbnz	r2, 8007354 <_realloc_r+0x20>
 800734a:	f7ff ff4b 	bl	80071e4 <_free_r>
 800734e:	4625      	mov	r5, r4
 8007350:	4628      	mov	r0, r5
 8007352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007354:	f000 f826 	bl	80073a4 <_malloc_usable_size_r>
 8007358:	42a0      	cmp	r0, r4
 800735a:	d20f      	bcs.n	800737c <_realloc_r+0x48>
 800735c:	4621      	mov	r1, r4
 800735e:	4638      	mov	r0, r7
 8007360:	f7ff ff8e 	bl	8007280 <_malloc_r>
 8007364:	4605      	mov	r5, r0
 8007366:	2800      	cmp	r0, #0
 8007368:	d0f2      	beq.n	8007350 <_realloc_r+0x1c>
 800736a:	4631      	mov	r1, r6
 800736c:	4622      	mov	r2, r4
 800736e:	f7ff ff15 	bl	800719c <memcpy>
 8007372:	4631      	mov	r1, r6
 8007374:	4638      	mov	r0, r7
 8007376:	f7ff ff35 	bl	80071e4 <_free_r>
 800737a:	e7e9      	b.n	8007350 <_realloc_r+0x1c>
 800737c:	4635      	mov	r5, r6
 800737e:	e7e7      	b.n	8007350 <_realloc_r+0x1c>

08007380 <_sbrk_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4c06      	ldr	r4, [pc, #24]	; (800739c <_sbrk_r+0x1c>)
 8007384:	2300      	movs	r3, #0
 8007386:	4605      	mov	r5, r0
 8007388:	4608      	mov	r0, r1
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	f7fa f85a 	bl	8001444 <_sbrk>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_sbrk_r+0x1a>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	b103      	cbz	r3, 800739a <_sbrk_r+0x1a>
 8007398:	602b      	str	r3, [r5, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	20000434 	.word	0x20000434

080073a0 <__malloc_lock>:
 80073a0:	4770      	bx	lr

080073a2 <__malloc_unlock>:
 80073a2:	4770      	bx	lr

080073a4 <_malloc_usable_size_r>:
 80073a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073a8:	1f18      	subs	r0, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bfbc      	itt	lt
 80073ae:	580b      	ldrlt	r3, [r1, r0]
 80073b0:	18c0      	addlt	r0, r0, r3
 80073b2:	4770      	bx	lr

080073b4 <_init>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	bf00      	nop
 80073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ba:	bc08      	pop	{r3}
 80073bc:	469e      	mov	lr, r3
 80073be:	4770      	bx	lr

080073c0 <_fini>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	bf00      	nop
 80073c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c6:	bc08      	pop	{r3}
 80073c8:	469e      	mov	lr, r3
 80073ca:	4770      	bx	lr
